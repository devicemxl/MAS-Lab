/* Generated By:JavaCC: Do not edit this line. TTaemsGrammarTokenManager.java */
package taems.parser;
import java.util.*;
import taems.*;
import utilities.Log;
import utilities.Distribution;

public class TTaemsGrammarTokenManager implements TTaemsGrammarConstants
{
  public static  java.io.PrintStream debugStream = System.out;
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
static private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 9:
         jjmatchedKind = 3;
         return jjMoveNfa_0(0, 0);
      case 10:
         jjmatchedKind = 4;
         return jjMoveNfa_0(0, 0);
      case 12:
         jjmatchedKind = 6;
         return jjMoveNfa_0(0, 0);
      case 13:
         jjmatchedKind = 5;
         return jjMoveNfa_0(0, 0);
      case 32:
         jjmatchedKind = 2;
         return jjMoveNfa_0(0, 0);
      case 40:
         jjmatchedKind = 7;
         return jjMoveNfa_0(0, 0);
      case 41:
         jjmatchedKind = 8;
         return jjMoveNfa_0(0, 0);
      case 65:
         return jjMoveStringLiteralDfa1_0(0x100009000L, 0x0L);
      case 67:
         return jjMoveStringLiteralDfa1_0(0x800000004000000L, 0x1040201100000L);
      case 68:
         return jjMoveStringLiteralDfa1_0(0x484008002860000L, 0xc080400840000L);
      case 69:
         return jjMoveStringLiteralDfa1_0(0x10000L, 0x0L);
      case 70:
         return jjMoveStringLiteralDfa1_0(0x3080000000L, 0x10020L);
      case 71:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1c000000L);
      case 73:
         return jjMoveStringLiteralDfa1_0(0x200000000L, 0x4L);
      case 76:
         return jjMoveStringLiteralDfa1_0(0x400L, 0x0L);
      case 77:
         return jjMoveStringLiteralDfa1_0(0x2000000000000L, 0x20f00000000008L);
      case 78:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10000000000001L);
      case 79:
         return jjMoveStringLiteralDfa1_0(0x100000000400000L, 0x0L);
      case 80:
         return jjMoveStringLiteralDfa1_0(0x8000020000000L, 0x2000000001000L);
      case 81:
         return jjMoveStringLiteralDfa1_0(0x220000001004000L, 0x20100420000L);
      case 82:
         return jjMoveStringLiteralDfa1_0(0x10000010000000L, 0x0L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x3041ff0c40382a00L, 0x220ef80L);
      case 84:
         return jjMoveStringLiteralDfa1_0(0xc000004008000000L, 0x1c0e0080050L);
      case 85:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x3800000002L);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x100009000L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x800000004000000L, 0x1040201100000L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x484008002860000L, 0xc080400840000L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x10000L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x3080000000L, 0x10020L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1c000000L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x200000000L, 0x4L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x400L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x2000000000000L, 0x20f00000000008L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10000000000001L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x100000000400000L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x8000020000000L, 0x2000000001000L);
      case 113:
         return jjMoveStringLiteralDfa1_0(0x220000001004000L, 0x20100420000L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x10000010000000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x3041ff0c40382a00L, 0x220ef80L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0xc000004008000000L, 0x1c0e0080050L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x3800000002L);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
static private final int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 0);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000010014400L, active1, 0x80000L);
      case 67:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000L, active1, 0xc80L);
      case 69:
         return jjMoveStringLiteralDfa2_0(active0, 0x98008020860000L, active1, 0x20f00000000001L);
      case 71:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000L, active1, 0L);
      case 72:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1c0e0000000L);
      case 73:
         return jjMoveStringLiteralDfa2_0(active0, 0x88000000L, active1, 0x10018L);
      case 77:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4L);
      case 78:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000L, active1, 0x3800000000L);
      case 79:
         if ((active0 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x802000004000000L, active1, 0x1d04021d100040L);
      case 80:
         return jjMoveStringLiteralDfa2_0(active0, 0x3001ff0c00280a00L, active1, 0x2206300L);
      case 82:
         return jjMoveStringLiteralDfa2_0(active0, 0x3000008000L, active1, 0x2000000001020L);
      case 84:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000040000000L, active1, 0x8002L);
      case 85:
         return jjMoveStringLiteralDfa2_0(active0, 0x624000003502000L, active1, 0xa0500c60000L);
      case 86:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000000000L, active1, 0L);
      case 89:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000010014400L, active1, 0x80000L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000L, active1, 0xc80L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x98008020860000L, active1, 0x20f00000000001L);
      case 103:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000L, active1, 0L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1c0e0000000L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x88000000L, active1, 0x10018L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000L, active1, 0x3800000000L);
      case 111:
         if ((active0 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x802000004000000L, active1, 0x1d04021d100040L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x3001ff0c00280a00L, active1, 0x2206300L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x3000008000L, active1, 0x2000000001020L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000040000000L, active1, 0x8002L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x624000003502000L, active1, 0xa0500c60000L);
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000000000L, active1, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000000000L, active1, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 1);
}
static private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 1);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa3_0(active0, 0x260000041020000L, active1, 0x20100428000L);
      case 66:
         return jjMoveStringLiteralDfa3_0(active0, 0x2400L, active1, 0L);
      case 67:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000L, active1, 0x3800000000L);
      case 68:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000000L, active1, 0L);
      case 69:
         return jjMoveStringLiteralDfa3_0(active0, 0x3101ff0c00281a00L, active1, 0x2207300L);
      case 70:
         if ((active0 & 0x4000L) != 0L)
         {
            jjmatchedKind = 14;
            jjmatchedPos = 2;
         }
         break;
      case 71:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1L);
      case 72:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0xc80L);
      case 73:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2L);
      case 76:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000040000L, active1, 0L);
      case 77:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000L, active1, 0x100010L);
      case 78:
         return jjMoveStringLiteralDfa3_0(active0, 0x80800000L, active1, 0x1d000000010008L);
      case 79:
         return jjMoveStringLiteralDfa3_0(active0, 0x3000000000L, active1, 0x200001c000020L);
      case 80:
         return jjMoveStringLiteralDfa3_0(active0, 0x4080000000100000L, active1, 0x4L);
      case 82:
         return jjMoveStringLiteralDfa3_0(active0, 0x40c000022018000L, active1, 0x9c4e0840000L);
      case 83:
         return jjMoveStringLiteralDfa3_0(active0, 0x8810000004000000L, active1, 0x40201080000L);
      case 84:
         return jjMoveStringLiteralDfa3_0(active0, 0x210400000L, active1, 0x20f00000000000L);
      case 95:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x40L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x260000041020000L, active1, 0x20100428000L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x2400L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000L, active1, 0x3800000000L);
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x3101ff0c00281a00L, active1, 0x2207300L);
      case 102:
         if ((active0 & 0x4000L) != 0L)
         {
            jjmatchedKind = 14;
            jjmatchedPos = 2;
         }
         break;
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1L);
      case 104:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0xc80L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000040000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000L, active1, 0x100010L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x80800000L, active1, 0x1d000000010008L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x3000000000L, active1, 0x200001c000020L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x4080000000100000L, active1, 0x4L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x40c000022018000L, active1, 0x9c4e0840000L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x8810000004000000L, active1, 0x40201080000L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x210400000L, active1, 0x20f00000000000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 2);
}
static private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 2);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa4_0(active0, 0x404008002000000L, active1, 0xf80400840040L);
      case 67:
         return jjMoveStringLiteralDfa4_0(active0, 0x3001ff0c20680a00L, active1, 0x2207300L);
      case 68:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000L, active1, 0x200001c000000L);
      case 69:
         if ((active0 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x2000208100400L, active1, 0x1f8e0000c90L);
      case 72:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x20000000000000L);
      case 73:
         return jjMoveStringLiteralDfa4_0(active0, 0x90048000L, active1, 0x10008L);
      case 75:
         if ((active0 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 63;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x80000L);
      case 76:
         return jjMoveStringLiteralDfa4_0(active0, 0x280000001010000L, active1, 0x10020100420002L);
      case 77:
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000L, active1, 0x100020L);
      case 78:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000001000L, active1, 0L);
      case 79:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000000000L, active1, 0x5L);
      case 82:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000140000000L, active1, 0x8000L);
      case 83:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000L, active1, 0x1000000000000L);
      case 84:
         return jjMoveStringLiteralDfa4_0(active0, 0x840000004002000L, active1, 0xc040201000000L);
      case 95:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x404008002000000L, active1, 0xf80400840040L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x3001ff0c20680a00L, active1, 0x2207300L);
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000L, active1, 0x200001c000000L);
      case 101:
         if ((active0 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x2000208100400L, active1, 0x1f8e0000c90L);
      case 104:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x20000000000000L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x90048000L, active1, 0x10008L);
      case 107:
         if ((active0 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 63;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x80000L);
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0x280000001010000L, active1, 0x10020100420002L);
      case 109:
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000L, active1, 0x100020L);
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000001000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000000000L, active1, 0x5L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000140000000L, active1, 0x8000L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000L, active1, 0x1000000000000L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x840000004002000L, active1, 0xc040201000000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 3);
}
static private final int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 3);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000L, active1, 0L);
      case 68:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0xc80L);
      case 69:
         if ((active0 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x80000020000000L, active1, 0L);
      case 71:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x40L);
      case 73:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000001810000L, active1, 0x20100520002L);
      case 76:
         if ((active0 & 0x400L) != 0L)
         {
            jjmatchedKind = 10;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 49;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000020000L, active1, 0L);
      case 77:
         if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 18;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x8L);
      case 78:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000L, active1, 0x1c000000L);
      case 79:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000L, active1, 0x30000000001000L);
      case 82:
         return jjMoveStringLiteralDfa5_0(active0, 0x200100000L, active1, 0x3800000004L);
      case 83:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000L, active1, 0x1c0e0010000L);
      case 84:
         if ((active0 & 0x1000L) != 0L)
         {
            jjmatchedKind = 12;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x42c000042000000L, active1, 0x80400848001L);
      case 85:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000100000000L, active1, 0x3000000000000L);
      case 86:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000L, active1, 0L);
      case 89:
         if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 4;
         }
         break;
      case 95:
         return jjMoveStringLiteralDfa5_0(active0, 0x3801ff1c0c280a00L, active1, 0xcf40203286330L);
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0xc80L);
      case 101:
         if ((active0 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x80000020000000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x40L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000001810000L, active1, 0x20100520002L);
      case 108:
         if ((active0 & 0x400L) != 0L)
         {
            jjmatchedKind = 10;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 49;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000020000L, active1, 0L);
      case 109:
         if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 18;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x8L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000L, active1, 0x1c000000L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000L, active1, 0x30000000001000L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x200100000L, active1, 0x3800000004L);
      case 115:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000L, active1, 0x1c0e0010000L);
      case 116:
         if ((active0 & 0x1000L) != 0L)
         {
            jjmatchedKind = 12;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x42c000042000000L, active1, 0x80400848001L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000100000000L, active1, 0x3000000000000L);
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000L, active1, 0L);
      case 121:
         if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 4;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 4);
}
static private final int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 4);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000008200L, active1, 0x20L);
      case 67:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000c00000000000L, active1, 0x12040000000000L);
      case 68:
         return jjMoveStringLiteralDfa6_0(active0, 0x80c000000L, active1, 0x20000000000000L);
      case 69:
         return jjMoveStringLiteralDfa6_0(active0, 0x500010000L, active1, 0x1e004040L);
      case 70:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000000L, active1, 0L);
      case 71:
         if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x100000000000L);
      case 72:
         return jjMoveStringLiteralDfa6_0(active0, 0x40080000000L, active1, 0x1c0e0010000L);
      case 73:
         return jjMoveStringLiteralDfa6_0(active0, 0x42c000002020000L, active1, 0xc080400840001L);
      case 76:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000000L, active1, 0x200000000L);
      case 77:
         return jjMoveStringLiteralDfa6_0(active0, 0x600000L, active1, 0x1000000000200L);
      case 78:
         return jjMoveStringLiteralDfa6_0(active0, 0x2001000020000000L, active1, 0x1000L);
      case 79:
         return jjMoveStringLiteralDfa6_0(active0, 0x100001000000000L, active1, 0L);
      case 80:
         return jjMoveStringLiteralDfa6_0(active0, 0x800200000000000L, active1, 0x2000L);
      case 81:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x80000L);
      case 82:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000200000000L, active1, 0L);
      case 83:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000L, active1, 0x200110L);
      case 84:
         return jjMoveStringLiteralDfa6_0(active0, 0x280000001980800L, active1, 0x223900520006L);
      case 85:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000000L, active1, 0xc00000000c88L);
      case 86:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x1000000L);
      case 95:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000L, active1, 0x8000L);
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000008200L, active1, 0x20L);
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000c00000000000L, active1, 0x12040000000000L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x80c000000L, active1, 0x20000000000000L);
      case 101:
         return jjMoveStringLiteralDfa6_0(active0, 0x500010000L, active1, 0x1e004040L);
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000000L, active1, 0L);
      case 103:
         if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x100000000000L);
      case 104:
         return jjMoveStringLiteralDfa6_0(active0, 0x40080000000L, active1, 0x1c0e0010000L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x42c000002020000L, active1, 0xc080400840001L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000000L, active1, 0x200000000L);
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x600000L, active1, 0x1000000000200L);
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x2001000020000000L, active1, 0x1000L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x100001000000000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa6_0(active0, 0x800200000000000L, active1, 0x2000L);
      case 113:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x80000L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000200000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000L, active1, 0x200110L);
      case 116:
         return jjMoveStringLiteralDfa6_0(active0, 0x280000001980800L, active1, 0x223900520006L);
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000000L, active1, 0xc00000000c88L);
      case 118:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x1000000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 5);
}
static private final int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 5);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa7_0(active0, 0x100020000180800L, active1, 0x10003801004015L);
      case 67:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000000000L, active1, 0x200100L);
      case 68:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000L, active1, 0x1000L);
      case 69:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000200600000L, active1, 0x3040000000000L);
      case 71:
         return jjMoveStringLiteralDfa7_0(active0, 0x200L, active1, 0x20L);
      case 72:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x200000000000L);
      case 73:
         return jjMoveStringLiteralDfa7_0(active0, 0x14080c000000L, active1, 0x200000000L);
      case 75:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000L, active1, 0L);
      case 76:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000L, active1, 0xe80L);
      case 77:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000000000L, active1, 0x100008L);
      case 78:
         return jjMoveStringLiteralDfa7_0(active0, 0x400020000L, active1, 0xcc00000000040L);
      case 79:
         return jjMoveStringLiteralDfa7_0(active0, 0x3c05c00002000000L, active1, 0x19c4e0840000L);
      case 82:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000000L, active1, 0x2000L);
      case 83:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000010000L, active1, 0x1c000000L);
      case 84:
         return jjMoveStringLiteralDfa7_0(active0, 0x20010060000000L, active1, 0x8000L);
      case 85:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000000L, active1, 0x80000L);
      case 86:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x2000000L);
      case 89:
         if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x2L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x200000001000000L, active1, 0x20100420000L);
      case 95:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000L, active1, 0x20000000010000L);
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x100020000180800L, active1, 0x10003801004015L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000000000L, active1, 0x200100L);
      case 100:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000L, active1, 0x1000L);
      case 101:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000200600000L, active1, 0x3040000000000L);
      case 103:
         return jjMoveStringLiteralDfa7_0(active0, 0x200L, active1, 0x20L);
      case 104:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x200000000000L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x14080c000000L, active1, 0x200000000L);
      case 107:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000L, active1, 0xe80L);
      case 109:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000000000L, active1, 0x100008L);
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0x400020000L, active1, 0xcc00000000040L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x3c05c00002000000L, active1, 0x19c4e0840000L);
      case 114:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000000L, active1, 0x2000L);
      case 115:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000010000L, active1, 0x1c000000L);
      case 116:
         return jjMoveStringLiteralDfa7_0(active0, 0x20010060000000L, active1, 0x8000L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000000L, active1, 0x80000L);
      case 118:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x2000000L);
      case 121:
         if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x2L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x200000001000000L, active1, 0x20100420000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 6);
}
static private final int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 6);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa8_0(active0, 0x420000000L, active1, 0x2080000L);
      case 66:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x1L);
      case 67:
         return jjMoveStringLiteralDfa8_0(active0, 0x20000000000L, active1, 0xc00000000200L);
      case 68:
         return jjMoveStringLiteralDfa8_0(active0, 0x180000000000000L, active1, 0L);
      case 69:
         if ((active0 & 0x20000L) != 0L)
         {
            jjmatchedKind = 17;
            jjmatchedPos = 7;
         }
         else if ((active0 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0x8080000000200L, active1, 0x102ca0L);
      case 72:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x200100L);
      case 73:
         return jjMoveStringLiteralDfa8_0(active0, 0x40000000L, active1, 0x20003800009000L);
      case 76:
         if ((active1 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 116;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0x200000000L, active1, 0x1c0e1000000L);
      case 77:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000100000000000L, active1, 0x200000000L);
      case 78:
         return jjMoveStringLiteralDfa8_0(active0, 0x2405c40002000000L, active1, 0x80400840004L);
      case 79:
         return jjMoveStringLiteralDfa8_0(active0, 0x200000000000L, active1, 0x100000000000L);
      case 82:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x240000004000L);
      case 83:
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 13;
            jjmatchedPos = 7;
         }
         else if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 22;
            jjmatchedPos = 7;
         }
         else if ((active1 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 112;
            jjmatchedPos = 7;
         }
         else if ((active1 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 113;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0x80c180800L, active1, 0x1c000000L);
      case 84:
         if ((active1 & 0x40L) != 0L)
         {
            jjmatchedKind = 70;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0x11080210000L, active1, 0xc000000010010L);
      case 87:
         return jjMoveStringLiteralDfa8_0(active0, 0x800000000000000L, active1, 0L);
      case 89:
         if ((active0 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 7;
         }
         break;
      case 95:
         return jjMoveStringLiteralDfa8_0(active0, 0x200000101008000L, active1, 0x20100420008L);
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x420000000L, active1, 0x2080000L);
      case 98:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x1L);
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x20000000000L, active1, 0xc00000000200L);
      case 100:
         return jjMoveStringLiteralDfa8_0(active0, 0x180000000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x20000L) != 0L)
         {
            jjmatchedKind = 17;
            jjmatchedPos = 7;
         }
         else if ((active0 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0x8080000000200L, active1, 0x102ca0L);
      case 104:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x200100L);
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x40000000L, active1, 0x20003800009000L);
      case 108:
         if ((active1 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 116;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0x200000000L, active1, 0x1c0e1000000L);
      case 109:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000100000000000L, active1, 0x200000000L);
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x2405c40002000000L, active1, 0x80400840004L);
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x200000000000L, active1, 0x100000000000L);
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x240000004000L);
      case 115:
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 13;
            jjmatchedPos = 7;
         }
         else if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 22;
            jjmatchedPos = 7;
         }
         else if ((active1 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 112;
            jjmatchedPos = 7;
         }
         else if ((active1 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 113;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0x80c180800L, active1, 0x1c000000L);
      case 116:
         if ((active1 & 0x40L) != 0L)
         {
            jjmatchedKind = 70;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0x11080210000L, active1, 0xc000000010010L);
      case 119:
         return jjMoveStringLiteralDfa8_0(active0, 0x800000000000000L, active1, 0L);
      case 121:
         if ((active0 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 7;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 7);
}
static private final int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 7);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 7);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa9_0(active0, 0xa00000000L, active1, 0L);
      case 66:
         return jjMoveStringLiteralDfa9_0(active0, 0x400000000L, active1, 0L);
      case 67:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000000000L, active1, 0x20000002004L);
      case 68:
         return jjMoveStringLiteralDfa9_0(active0, 0x240001000000L, active1, 0x11c0e0000000L);
      case 69:
         return jjMoveStringLiteralDfa9_0(active0, 0x900000000000000L, active1, 0xce00000200100L);
      case 71:
         return jjMoveStringLiteralDfa9_0(active0, 0x20000000L, active1, 0L);
      case 72:
         return jjMoveStringLiteralDfa9_0(active0, 0x200000L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa9_0(active0, 0x120080000000L, active1, 0x200010011L);
      case 75:
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active0, 0x100800L, active1, 0L);
      case 76:
         return jjMoveStringLiteralDfa9_0(active0, 0x2000000000000000L, active1, 0x2084000L);
      case 77:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000000040000000L, active1, 0x28000L);
      case 78:
         return jjMoveStringLiteralDfa9_0(active0, 0x200L, active1, 0x3800100020L);
      case 80:
         return jjMoveStringLiteralDfa9_0(active0, 0x200000000000000L, active1, 0L);
      case 81:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x8L);
      case 82:
         return jjMoveStringLiteralDfa9_0(active0, 0x10000000000L, active1, 0L);
      case 83:
         if ((active0 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 8;
         }
         else if ((active1 & 0x80L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active0, 0xc00000000000L, active1, 0x20000000000000L);
      case 84:
         return jjMoveStringLiteralDfa9_0(active0, 0x10c008000L, active1, 0x40100001000L);
      case 85:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x1000000L);
      case 86:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x400000L);
      case 95:
         return jjMoveStringLiteralDfa9_0(active0, 0x48d000002010000L, active1, 0x8041c840e00L);
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0xa00000000L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa9_0(active0, 0x400000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000000000L, active1, 0x20000002004L);
      case 100:
         return jjMoveStringLiteralDfa9_0(active0, 0x240001000000L, active1, 0x11c0e0000000L);
      case 101:
         return jjMoveStringLiteralDfa9_0(active0, 0x900000000000000L, active1, 0xce00000200100L);
      case 103:
         return jjMoveStringLiteralDfa9_0(active0, 0x20000000L, active1, 0L);
      case 104:
         return jjMoveStringLiteralDfa9_0(active0, 0x200000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x120080000000L, active1, 0x200010011L);
      case 107:
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active0, 0x100800L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa9_0(active0, 0x2000000000000000L, active1, 0x2084000L);
      case 109:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000000040000000L, active1, 0x28000L);
      case 110:
         return jjMoveStringLiteralDfa9_0(active0, 0x200L, active1, 0x3800100020L);
      case 112:
         return jjMoveStringLiteralDfa9_0(active0, 0x200000000000000L, active1, 0L);
      case 113:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x8L);
      case 114:
         return jjMoveStringLiteralDfa9_0(active0, 0x10000000000L, active1, 0L);
      case 115:
         if ((active0 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 8;
         }
         else if ((active1 & 0x80L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 8;
         }
         return jjMoveStringLiteralDfa9_0(active0, 0xc00000000000L, active1, 0x20000000000000L);
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0x10c008000L, active1, 0x40100001000L);
      case 117:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x1000000L);
      case 118:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x400000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 8);
}
static private final int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 8);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 8);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa10_0(active0, 0x80000000000000L, active1, 0x40000400000L);
      case 66:
         return jjMoveStringLiteralDfa10_0(active0, 0x800000000L, active1, 0L);
      case 67:
         return jjMoveStringLiteralDfa10_0(active0, 0x1000000000000L, active1, 0x80008000000L);
      case 68:
         return jjMoveStringLiteralDfa10_0(active0, 0x100000002000000L, active1, 0x10200100L);
      case 69:
         if ((active0 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 30;
            jjmatchedPos = 9;
         }
         else if ((active1 & 0x4L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 9;
         }
         else if ((active1 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active0, 0x40020000000L, active1, 0x2000000ac00L);
      case 72:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x100000000L);
      case 73:
         return jjMoveStringLiteralDfa10_0(active0, 0x1004010101008000L, active1, 0x85000L);
      case 76:
         return jjMoveStringLiteralDfa10_0(active0, 0x20400000000L, active1, 0x400000001L);
      case 77:
         return jjMoveStringLiteralDfa10_0(active0, 0x80000000L, active1, 0x50000L);
      case 78:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x100000000000L);
      case 79:
         return jjMoveStringLiteralDfa10_0(active0, 0x2200001000200000L, active1, 0x20000L);
      case 80:
         return jjMoveStringLiteralDfa10_0(active0, 0x400000000000000L, active1, 0L);
      case 81:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x4000000L);
      case 82:
         if ((active0 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active0, 0xc000000L, active1, 0xcc00000000000L);
      case 83:
         if ((active0 & 0x100000L) != 0L)
         {
            jjmatchedKind = 20;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active0, 0x10000L, active1, 0x200000000210L);
      case 84:
         if ((active0 & 0x200L) != 0L)
         {
            jjmatchedKind = 9;
            jjmatchedPos = 9;
         }
         else if ((active1 & 0x20L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 9;
         }
         else if ((active1 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 97;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active0, 0x100200000000L, active1, 0x3800100000L);
      case 85:
         return jjMoveStringLiteralDfa10_0(active0, 0x8e00000000000L, active1, 0x2000008L);
      case 86:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x800000L);
      case 95:
         return jjMoveStringLiteralDfa10_0(active0, 0x800L, active1, 0x2001c0e0000000L);
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0x80000000000000L, active1, 0x40000400000L);
      case 98:
         return jjMoveStringLiteralDfa10_0(active0, 0x800000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa10_0(active0, 0x1000000000000L, active1, 0x80008000000L);
      case 100:
         return jjMoveStringLiteralDfa10_0(active0, 0x100000002000000L, active1, 0x10200100L);
      case 101:
         if ((active0 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 30;
            jjmatchedPos = 9;
         }
         else if ((active1 & 0x4L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 9;
         }
         else if ((active1 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 88;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active0, 0x40020000000L, active1, 0x2000000ac00L);
      case 104:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x100000000L);
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0x1004010101008000L, active1, 0x85000L);
      case 108:
         return jjMoveStringLiteralDfa10_0(active0, 0x20400000000L, active1, 0x400000001L);
      case 109:
         return jjMoveStringLiteralDfa10_0(active0, 0x80000000L, active1, 0x50000L);
      case 110:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x100000000000L);
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0x2200001000200000L, active1, 0x20000L);
      case 112:
         return jjMoveStringLiteralDfa10_0(active0, 0x400000000000000L, active1, 0L);
      case 113:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x4000000L);
      case 114:
         if ((active0 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active0, 0xc000000L, active1, 0xcc00000000000L);
      case 115:
         if ((active0 & 0x100000L) != 0L)
         {
            jjmatchedKind = 20;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active0, 0x10000L, active1, 0x200000000210L);
      case 116:
         if ((active0 & 0x200L) != 0L)
         {
            jjmatchedKind = 9;
            jjmatchedPos = 9;
         }
         else if ((active1 & 0x20L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 9;
         }
         else if ((active1 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 97;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active0, 0x100200000000L, active1, 0x3800100000L);
      case 117:
         return jjMoveStringLiteralDfa10_0(active0, 0x8e00000000000L, active1, 0x2000008L);
      case 118:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x800000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 9);
}
static private final int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 9);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 9);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x2800008L);
      case 66:
         return jjMoveStringLiteralDfa11_0(active0, 0x10000000000L, active1, 0L);
      case 67:
         return jjMoveStringLiteralDfa11_0(active0, 0x2000200000000000L, active1, 0x1c040000200L);
      case 68:
         if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 21;
            jjmatchedPos = 10;
         }
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x80002000L);
      case 69:
         if ((active0 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 10;
         }
         return jjMoveStringLiteralDfa11_0(active0, 0x400000000L, active1, 0x180000014000L);
      case 70:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x10L);
      case 71:
         return jjMoveStringLiteralDfa11_0(active0, 0x800L, active1, 0L);
      case 72:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x200000000000L);
      case 73:
         return jjMoveStringLiteralDfa11_0(active0, 0x2020e000000L, active1, 0x40400000001L);
      case 76:
         return jjMoveStringLiteralDfa11_0(active0, 0x800000000L, active1, 0x400c00L);
      case 77:
         return jjMoveStringLiteralDfa11_0(active0, 0xc01100008000L, active1, 0L);
      case 78:
         return jjMoveStringLiteralDfa11_0(active0, 0xc000000000000L, active1, 0x20000000020000L);
      case 79:
         return jjMoveStringLiteralDfa11_0(active0, 0x401000000000000L, active1, 0x8041000L);
      case 81:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x20000000L);
      case 82:
         return jjMoveStringLiteralDfa11_0(active0, 0x40000000000L, active1, 0x20100000000L);
      case 83:
         if ((active0 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 10;
         }
         return jjMoveStringLiteralDfa11_0(active0, 0x1000000L, active1, 0L);
      case 84:
         if ((active0 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 10;
         }
         return jjMoveStringLiteralDfa11_0(active0, 0x1000000000010000L, active1, 0xc00000080000L);
      case 85:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x14200100L);
      case 86:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0xc000000000000L);
      case 87:
         return jjMoveStringLiteralDfa11_0(active0, 0x200000000000000L, active1, 0L);
      case 89:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x3800000000L);
      case 95:
         return jjMoveStringLiteralDfa11_0(active0, 0x100000020000000L, active1, 0x108000L);
      case 97:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x2800008L);
      case 98:
         return jjMoveStringLiteralDfa11_0(active0, 0x10000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa11_0(active0, 0x2000200000000000L, active1, 0x1c040000200L);
      case 100:
         if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 21;
            jjmatchedPos = 10;
         }
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x80002000L);
      case 101:
         if ((active0 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 31;
            jjmatchedPos = 10;
         }
         return jjMoveStringLiteralDfa11_0(active0, 0x400000000L, active1, 0x180000014000L);
      case 102:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x10L);
      case 103:
         return jjMoveStringLiteralDfa11_0(active0, 0x800L, active1, 0L);
      case 104:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x200000000000L);
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0x2020e000000L, active1, 0x40400000001L);
      case 108:
         return jjMoveStringLiteralDfa11_0(active0, 0x800000000L, active1, 0x400c00L);
      case 109:
         return jjMoveStringLiteralDfa11_0(active0, 0xc01100008000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa11_0(active0, 0xc000000000000L, active1, 0x20000000020000L);
      case 111:
         return jjMoveStringLiteralDfa11_0(active0, 0x401000000000000L, active1, 0x8041000L);
      case 113:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x20000000L);
      case 114:
         return jjMoveStringLiteralDfa11_0(active0, 0x40000000000L, active1, 0x20100000000L);
      case 115:
         if ((active0 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 10;
         }
         return jjMoveStringLiteralDfa11_0(active0, 0x1000000L, active1, 0L);
      case 116:
         if ((active0 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 10;
         }
         return jjMoveStringLiteralDfa11_0(active0, 0x1000000000010000L, active1, 0xc00000080000L);
      case 117:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x14200100L);
      case 118:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0xc000000000000L);
      case 119:
         return jjMoveStringLiteralDfa11_0(active0, 0x200000000000000L, active1, 0L);
      case 121:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x3800000000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 10);
}
static private final int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 10);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 10);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa12_0(active0, 0x2100800000010000L, active1, 0xcc00004000000L);
      case 66:
         return jjMoveStringLiteralDfa12_0(active0, 0xc000000L, active1, 0L);
      case 68:
         return jjMoveStringLiteralDfa12_0(active0, 0x4000000000000L, active1, 0x8000L);
      case 69:
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 15;
            jjmatchedPos = 11;
         }
         else if ((active0 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 11;
         }
         else if ((active0 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 11;
         }
         return jjMoveStringLiteralDfa12_0(active0, 0x200600800000000L, active1, 0x1c100002c00L);
      case 72:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x200L);
      case 73:
         return jjMoveStringLiteralDfa12_0(active0, 0x8000000000000L, active1, 0x120010L);
      case 76:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0xa00108L);
      case 77:
         return jjMoveStringLiteralDfa12_0(active0, 0x1000000000000000L, active1, 0x400000000L);
      case 78:
         return jjMoveStringLiteralDfa12_0(active0, 0x1000000000000L, active1, 0x40000041000L);
      case 79:
         return jjMoveStringLiteralDfa12_0(active0, 0x220000000L, active1, 0x20200040000000L);
      case 82:
         return jjMoveStringLiteralDfa12_0(active0, 0x800L, active1, 0x80010000000L);
      case 83:
         if ((active0 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 11;
         }
         else if ((active0 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 11;
         }
         return jjMoveStringLiteralDfa12_0(active0, 0x2000000L, active1, 0x100008004000L);
      case 84:
         return jjMoveStringLiteralDfa12_0(active0, 0x20001000000L, active1, 0x20002000001L);
      case 85:
         return jjMoveStringLiteralDfa12_0(active0, 0x10000000000L, active1, 0xa0400000L);
      case 87:
         return jjMoveStringLiteralDfa12_0(active0, 0x400000000000000L, active1, 0L);
      case 89:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x80000L);
      case 95:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x3800010000L);
      case 97:
         return jjMoveStringLiteralDfa12_0(active0, 0x2100800000010000L, active1, 0xcc00004000000L);
      case 98:
         return jjMoveStringLiteralDfa12_0(active0, 0xc000000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa12_0(active0, 0x4000000000000L, active1, 0x8000L);
      case 101:
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 15;
            jjmatchedPos = 11;
         }
         else if ((active0 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 11;
         }
         else if ((active0 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 11;
         }
         return jjMoveStringLiteralDfa12_0(active0, 0x200600800000000L, active1, 0x1c100002c00L);
      case 104:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x200L);
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0x8000000000000L, active1, 0x120010L);
      case 108:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0xa00108L);
      case 109:
         return jjMoveStringLiteralDfa12_0(active0, 0x1000000000000000L, active1, 0x400000000L);
      case 110:
         return jjMoveStringLiteralDfa12_0(active0, 0x1000000000000L, active1, 0x40000041000L);
      case 111:
         return jjMoveStringLiteralDfa12_0(active0, 0x220000000L, active1, 0x20200040000000L);
      case 114:
         return jjMoveStringLiteralDfa12_0(active0, 0x800L, active1, 0x80010000000L);
      case 115:
         if ((active0 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 11;
         }
         else if ((active0 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 42;
            jjmatchedPos = 11;
         }
         return jjMoveStringLiteralDfa12_0(active0, 0x2000000L, active1, 0x100008004000L);
      case 116:
         return jjMoveStringLiteralDfa12_0(active0, 0x20001000000L, active1, 0x20002000001L);
      case 117:
         return jjMoveStringLiteralDfa12_0(active0, 0x10000000000L, active1, 0xa0400000L);
      case 119:
         return jjMoveStringLiteralDfa12_0(active0, 0x400000000000000L, active1, 0L);
      case 121:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x80000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 11);
}
static private final int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 11);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 11);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa13_0(active0, 0x20000000000L, active1, 0x20030000000L);
      case 66:
         return jjMoveStringLiteralDfa13_0(active0, 0x800000000000L, active1, 0L);
      case 67:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x1000000000L);
      case 68:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x2000010000L);
      case 69:
         if ((active1 & 0x100L) != 0L)
         {
            jjmatchedKind = 72;
            jjmatchedPos = 12;
         }
         else if ((active1 & 0x400000L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 12;
         }
         return jjMoveStringLiteralDfa13_0(active0, 0x1404000000000000L, active1, 0x200210L);
      case 70:
         return jjMoveStringLiteralDfa13_0(active0, 0x20000000L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0xc00402048008L);
      case 76:
         return jjMoveStringLiteralDfa13_0(active0, 0x2000000000000000L, active1, 0xc200004000000L);
      case 77:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0xc00L);
      case 78:
         return jjMoveStringLiteralDfa13_0(active0, 0x200000000L, active1, 0x20000000102000L);
      case 79:
         return jjMoveStringLiteralDfa13_0(active0, 0x800L, active1, 0L);
      case 81:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x800000000L);
      case 82:
         if ((active0 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 12;
         }
         return jjMoveStringLiteralDfa13_0(active0, 0x1010000L, active1, 0x1c080000000L);
      case 83:
         if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 35;
            jjmatchedPos = 12;
         }
         else if ((active0 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 12;
         }
         else if ((active0 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 12;
         }
         else if ((active1 & 0x1000L) != 0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 12;
         }
         return jjMoveStringLiteralDfa13_0(active0, 0x1000000000000L, active1, 0x100140000000L);
      case 84:
         if ((active0 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 12;
         }
         else if ((active0 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 12;
         }
         return jjMoveStringLiteralDfa13_0(active0, 0x10002000000L, active1, 0xc0008024000L);
      case 85:
         return jjMoveStringLiteralDfa13_0(active0, 0xc000000L, active1, 0x800000L);
      case 89:
         if ((active1 & 0x1L) != 0L)
         {
            jjmatchedKind = 64;
            jjmatchedPos = 12;
         }
         break;
      case 95:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x80000L);
      case 97:
         return jjMoveStringLiteralDfa13_0(active0, 0x20000000000L, active1, 0x20030000000L);
      case 98:
         return jjMoveStringLiteralDfa13_0(active0, 0x800000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x1000000000L);
      case 100:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x2000010000L);
      case 101:
         if ((active1 & 0x100L) != 0L)
         {
            jjmatchedKind = 72;
            jjmatchedPos = 12;
         }
         else if ((active1 & 0x400000L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 12;
         }
         return jjMoveStringLiteralDfa13_0(active0, 0x1404000000000000L, active1, 0x200210L);
      case 102:
         return jjMoveStringLiteralDfa13_0(active0, 0x20000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0xc00402048008L);
      case 108:
         return jjMoveStringLiteralDfa13_0(active0, 0x2000000000000000L, active1, 0xc200004000000L);
      case 109:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0xc00L);
      case 110:
         return jjMoveStringLiteralDfa13_0(active0, 0x200000000L, active1, 0x20000000102000L);
      case 111:
         return jjMoveStringLiteralDfa13_0(active0, 0x800L, active1, 0L);
      case 113:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x800000000L);
      case 114:
         if ((active0 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 12;
         }
         return jjMoveStringLiteralDfa13_0(active0, 0x1010000L, active1, 0x1c080000000L);
      case 115:
         if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 35;
            jjmatchedPos = 12;
         }
         else if ((active0 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 12;
         }
         else if ((active0 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 12;
         }
         else if ((active1 & 0x1000L) != 0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 12;
         }
         return jjMoveStringLiteralDfa13_0(active0, 0x1000000000000L, active1, 0x100140000000L);
      case 116:
         if ((active0 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 12;
         }
         else if ((active0 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 12;
         }
         return jjMoveStringLiteralDfa13_0(active0, 0x10002000000L, active1, 0xc0008024000L);
      case 117:
         return jjMoveStringLiteralDfa13_0(active0, 0xc000000L, active1, 0x800000L);
      case 121:
         if ((active1 & 0x1L) != 0L)
         {
            jjmatchedKind = 64;
            jjmatchedPos = 12;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 12);
}
static private final int jjMoveStringLiteralDfa13_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 12);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 12);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x80080000000L);
      case 67:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x2000L);
      case 68:
         if ((active1 & 0x10L) != 0L)
         {
            jjmatchedKind = 68;
            jjmatchedPos = 13;
         }
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x200000000200L);
      case 69:
         if ((active1 & 0x800000L) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 13;
         }
         return jjMoveStringLiteralDfa14_0(active0, 0x10000000000L, active1, 0xc00L);
      case 70:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x100000L);
      case 72:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x100000000L);
      case 73:
         return jjMoveStringLiteralDfa14_0(active0, 0x1000000L, active1, 0x20004090000L);
      case 76:
         return jjMoveStringLiteralDfa14_0(active0, 0x800000000000L, active1, 0x20000000L);
      case 78:
         return jjMoveStringLiteralDfa14_0(active0, 0x1000000000000000L, active1, 0xc00000000000L);
      case 79:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x1002020000L);
      case 80:
         return jjMoveStringLiteralDfa14_0(active0, 0x4000000000000L, active1, 0L);
      case 82:
         if ((active0 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 58;
            jjmatchedPos = 13;
         }
         return jjMoveStringLiteralDfa14_0(active0, 0x2000000L, active1, 0L);
      case 83:
         return jjMoveStringLiteralDfa14_0(active0, 0x200000000L, active1, 0xc000L);
      case 84:
         if ((active1 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 13;
         }
         return jjMoveStringLiteralDfa14_0(active0, 0x2000c010000L, active1, 0x1c050040008L);
      case 85:
         return jjMoveStringLiteralDfa14_0(active0, 0x1000000000800L, active1, 0x2800000000L);
      case 89:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x40000000000L);
      case 95:
         return jjMoveStringLiteralDfa14_0(active0, 0x2000000020000000L, active1, 0x2c100008200000L);
      case 97:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x80080000000L);
      case 99:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x2000L);
      case 100:
         if ((active1 & 0x10L) != 0L)
         {
            jjmatchedKind = 68;
            jjmatchedPos = 13;
         }
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x200000000200L);
      case 101:
         if ((active1 & 0x800000L) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 13;
         }
         return jjMoveStringLiteralDfa14_0(active0, 0x10000000000L, active1, 0xc00L);
      case 102:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x100000L);
      case 104:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x100000000L);
      case 105:
         return jjMoveStringLiteralDfa14_0(active0, 0x1000000L, active1, 0x20004090000L);
      case 108:
         return jjMoveStringLiteralDfa14_0(active0, 0x800000000000L, active1, 0x20000000L);
      case 110:
         return jjMoveStringLiteralDfa14_0(active0, 0x1000000000000000L, active1, 0xc00000000000L);
      case 111:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x1002020000L);
      case 112:
         return jjMoveStringLiteralDfa14_0(active0, 0x4000000000000L, active1, 0L);
      case 114:
         if ((active0 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 58;
            jjmatchedPos = 13;
         }
         return jjMoveStringLiteralDfa14_0(active0, 0x2000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa14_0(active0, 0x200000000L, active1, 0xc000L);
      case 116:
         if ((active1 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 13;
         }
         return jjMoveStringLiteralDfa14_0(active0, 0x2000c010000L, active1, 0x1c050040008L);
      case 117:
         return jjMoveStringLiteralDfa14_0(active0, 0x1000000000800L, active1, 0x2800000000L);
      case 121:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x40000000000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 13);
}
static private final int jjMoveStringLiteralDfa14_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 13);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 13);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x1c800000000L);
      case 66:
         return jjMoveStringLiteralDfa15_0(active0, 0x1000000L, active1, 0L);
      case 67:
         return jjMoveStringLiteralDfa15_0(active0, 0x2000000020000000L, active1, 0L);
      case 69:
         return jjMoveStringLiteralDfa15_0(active0, 0x4820000000000L, active1, 0x8000000002000L);
      case 72:
         return jjMoveStringLiteralDfa15_0(active0, 0x200000000L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa15_0(active0, 0xe000000L, active1, 0x80030000000L);
      case 76:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x20000000000000L);
      case 77:
         return jjMoveStringLiteralDfa15_0(active0, 0x1000000000000L, active1, 0L);
      case 78:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x20002080c00L);
      case 79:
         if ((active1 & 0x100000L) != 0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 14;
         }
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x100040000L);
      case 80:
         if ((active0 & 0x800L) != 0L)
         {
            jjmatchedKind = 11;
            jjmatchedPos = 14;
         }
         break;
      case 82:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x2000020000L);
      case 83:
         if ((active0 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 14;
         }
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x4101008210000L);
      case 84:
         if ((active0 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 14;
         }
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0xc0008400c000L);
      case 85:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x200L);
      case 89:
         if ((active1 & 0x8L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 14;
         }
         break;
      case 95:
         return jjMoveStringLiteralDfa15_0(active0, 0x10000L, active1, 0x240040000000L);
      case 97:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x1c800000000L);
      case 98:
         return jjMoveStringLiteralDfa15_0(active0, 0x1000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa15_0(active0, 0x2000000020000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa15_0(active0, 0x4820000000000L, active1, 0x8000000002000L);
      case 104:
         return jjMoveStringLiteralDfa15_0(active0, 0x200000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa15_0(active0, 0xe000000L, active1, 0x80030000000L);
      case 108:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x20000000000000L);
      case 109:
         return jjMoveStringLiteralDfa15_0(active0, 0x1000000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x20002080c00L);
      case 111:
         if ((active1 & 0x100000L) != 0L)
         {
            jjmatchedKind = 84;
            jjmatchedPos = 14;
         }
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x100040000L);
      case 112:
         if ((active0 & 0x800L) != 0L)
         {
            jjmatchedKind = 11;
            jjmatchedPos = 14;
         }
         break;
      case 114:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x2000020000L);
      case 115:
         if ((active0 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 14;
         }
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x4101008210000L);
      case 116:
         if ((active0 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 14;
         }
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0xc0008400c000L);
      case 117:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x200L);
      case 121:
         if ((active1 & 0x8L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 14;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 14);
}
static private final int jjMoveStringLiteralDfa15_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 14);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 14);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa16_0(active0, 0x1000000000000L, active1, 0x2000004000L);
      case 66:
         return jjMoveStringLiteralDfa16_0(active0, 0x2000000L, active1, 0L);
      case 69:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0x200000L);
      case 70:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0x80000L);
      case 73:
         return jjMoveStringLiteralDfa16_0(active0, 0x200000000L, active1, 0x1c080020000L);
      case 76:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0x100908000200L);
      case 78:
         return jjMoveStringLiteralDfa16_0(active0, 0x4000000000000L, active1, 0x8080000000000L);
      case 79:
         return jjMoveStringLiteralDfa16_0(active0, 0x200000000c000000L, active1, 0x20000010000000L);
      case 80:
         return jjMoveStringLiteralDfa16_0(active0, 0x20000000L, active1, 0L);
      case 82:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0x48000L);
      case 83:
         if ((active0 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 15;
         }
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0x200040000000L);
      case 84:
         if ((active1 & 0x800L) != 0L)
         {
            jjmatchedKind = 75;
            jjmatchedPos = 15;
         }
         return jjMoveStringLiteralDfa16_0(active0, 0x10000L, active1, 0x4061020010400L);
      case 85:
         return jjMoveStringLiteralDfa16_0(active0, 0x1000000L, active1, 0L);
      case 89:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0xc00004000000L);
      case 95:
         return jjMoveStringLiteralDfa16_0(active0, 0x800000000000L, active1, 0x2002000L);
      case 97:
         return jjMoveStringLiteralDfa16_0(active0, 0x1000000000000L, active1, 0x2000004000L);
      case 98:
         return jjMoveStringLiteralDfa16_0(active0, 0x2000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0x200000L);
      case 102:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0x80000L);
      case 105:
         return jjMoveStringLiteralDfa16_0(active0, 0x200000000L, active1, 0x1c080020000L);
      case 108:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0x100908000200L);
      case 110:
         return jjMoveStringLiteralDfa16_0(active0, 0x4000000000000L, active1, 0x8080000000000L);
      case 111:
         return jjMoveStringLiteralDfa16_0(active0, 0x200000000c000000L, active1, 0x20000010000000L);
      case 112:
         return jjMoveStringLiteralDfa16_0(active0, 0x20000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0x48000L);
      case 115:
         if ((active0 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 15;
         }
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0x200040000000L);
      case 116:
         if ((active1 & 0x800L) != 0L)
         {
            jjmatchedKind = 75;
            jjmatchedPos = 15;
         }
         return jjMoveStringLiteralDfa16_0(active0, 0x10000L, active1, 0x4061020010400L);
      case 117:
         return jjMoveStringLiteralDfa16_0(active0, 0x1000000L, active1, 0L);
      case 121:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0xc00004000000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 15);
}
static private final int jjMoveStringLiteralDfa16_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 15);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 15);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0x4000000000000L);
      case 66:
         return jjMoveStringLiteralDfa17_0(active0, 0x1000000000000L, active1, 0L);
      case 67:
         return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0x20000002000000L);
      case 68:
         if ((active1 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 96;
            jjmatchedPos = 16;
         }
         else if ((active1 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 115;
            jjmatchedPos = 16;
         }
         return jjMoveStringLiteralDfa17_0(active0, 0x4000000000000L, active1, 0L);
      case 69:
         if ((active1 & 0x200L) != 0L)
         {
            jjmatchedKind = 73;
            jjmatchedPos = 16;
         }
         break;
      case 72:
         return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0x40000000000L);
      case 73:
         return jjMoveStringLiteralDfa17_0(active0, 0x10000L, active1, 0x100808048000L);
      case 76:
         return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0x200040000000L);
      case 77:
         return jjMoveStringLiteralDfa17_0(active0, 0x2000000000000000L, active1, 0L);
      case 78:
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 26;
            jjmatchedPos = 16;
         }
         else if ((active0 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 27;
            jjmatchedPos = 16;
         }
         return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0x1c010020000L);
      case 79:
         return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0x80080000L);
      case 80:
         if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 33;
            jjmatchedPos = 16;
         }
         return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0x2000L);
      case 82:
         return jjMoveStringLiteralDfa17_0(active0, 0x800000000000L, active1, 0x14000L);
      case 83:
         if ((active1 & 0x400L) != 0L)
         {
            jjmatchedKind = 74;
            jjmatchedPos = 16;
         }
         break;
      case 84:
         return jjMoveStringLiteralDfa17_0(active0, 0x1000000L, active1, 0x82000200000L);
      case 85:
         return jjMoveStringLiteralDfa17_0(active0, 0x22000000L, active1, 0L);
      case 89:
         return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0x20020000000L);
      case 95:
         return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0xc01004000000L);
      case 97:
         return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0x4000000000000L);
      case 98:
         return jjMoveStringLiteralDfa17_0(active0, 0x1000000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0x20000002000000L);
      case 100:
         if ((active1 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 96;
            jjmatchedPos = 16;
         }
         else if ((active1 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 115;
            jjmatchedPos = 16;
         }
         return jjMoveStringLiteralDfa17_0(active0, 0x4000000000000L, active1, 0L);
      case 101:
         if ((active1 & 0x200L) != 0L)
         {
            jjmatchedKind = 73;
            jjmatchedPos = 16;
         }
         break;
      case 104:
         return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0x40000000000L);
      case 105:
         return jjMoveStringLiteralDfa17_0(active0, 0x10000L, active1, 0x100808048000L);
      case 108:
         return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0x200040000000L);
      case 109:
         return jjMoveStringLiteralDfa17_0(active0, 0x2000000000000000L, active1, 0L);
      case 110:
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 26;
            jjmatchedPos = 16;
         }
         else if ((active0 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 27;
            jjmatchedPos = 16;
         }
         return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0x1c010020000L);
      case 111:
         return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0x80080000L);
      case 112:
         if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 33;
            jjmatchedPos = 16;
         }
         return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0x2000L);
      case 114:
         return jjMoveStringLiteralDfa17_0(active0, 0x800000000000L, active1, 0x14000L);
      case 115:
         if ((active1 & 0x400L) != 0L)
         {
            jjmatchedKind = 74;
            jjmatchedPos = 16;
         }
         break;
      case 116:
         return jjMoveStringLiteralDfa17_0(active0, 0x1000000L, active1, 0x82000200000L);
      case 117:
         return jjMoveStringLiteralDfa17_0(active0, 0x22000000L, active1, 0L);
      case 121:
         return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0x20020000000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 16);
}
static private final int jjMoveStringLiteralDfa17_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 16);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 16);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa18_0(active0, 0L, active1, 0x20000000000000L);
      case 66:
         return jjMoveStringLiteralDfa18_0(active0, 0L, active1, 0x8000L);
      case 68:
         return jjMoveStringLiteralDfa18_0(active0, 0L, active1, 0x100008000000L);
      case 69:
         return jjMoveStringLiteralDfa18_0(active0, 0x4800000000000L, active1, 0L);
      case 71:
         return jjMoveStringLiteralDfa18_0(active0, 0L, active1, 0x20000L);
      case 73:
         return jjMoveStringLiteralDfa18_0(active0, 0x1000000L, active1, 0x202040010000L);
      case 76:
         return jjMoveStringLiteralDfa18_0(active0, 0x1000000000000L, active1, 0L);
      case 77:
         return jjMoveStringLiteralDfa18_0(active0, 0x2000000000010000L, active1, 0L);
      case 78:
         return jjMoveStringLiteralDfa18_0(active0, 0L, active1, 0x80040000L);
      case 82:
         return jjMoveStringLiteralDfa18_0(active0, 0L, active1, 0x4040002002000L);
      case 83:
         if ((active1 & 0x80000L) != 0L)
         {
            jjmatchedKind = 83;
            jjmatchedPos = 17;
         }
         return jjMoveStringLiteralDfa18_0(active0, 0L, active1, 0x401004000000L);
      case 84:
         return jjMoveStringLiteralDfa18_0(active0, 0x2000000L, active1, 0x81c800204000L);
      case 89:
         return jjMoveStringLiteralDfa18_0(active0, 0L, active1, 0x80000000000L);
      case 95:
         return jjMoveStringLiteralDfa18_0(active0, 0x20000000L, active1, 0x20030000000L);
      case 97:
         return jjMoveStringLiteralDfa18_0(active0, 0L, active1, 0x20000000000000L);
      case 98:
         return jjMoveStringLiteralDfa18_0(active0, 0L, active1, 0x8000L);
      case 100:
         return jjMoveStringLiteralDfa18_0(active0, 0L, active1, 0x100008000000L);
      case 101:
         return jjMoveStringLiteralDfa18_0(active0, 0x4800000000000L, active1, 0L);
      case 103:
         return jjMoveStringLiteralDfa18_0(active0, 0L, active1, 0x20000L);
      case 105:
         return jjMoveStringLiteralDfa18_0(active0, 0x1000000L, active1, 0x202040010000L);
      case 108:
         return jjMoveStringLiteralDfa18_0(active0, 0x1000000000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa18_0(active0, 0x2000000000010000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa18_0(active0, 0L, active1, 0x80040000L);
      case 114:
         return jjMoveStringLiteralDfa18_0(active0, 0L, active1, 0x4040002002000L);
      case 115:
         if ((active1 & 0x80000L) != 0L)
         {
            jjmatchedKind = 83;
            jjmatchedPos = 17;
         }
         return jjMoveStringLiteralDfa18_0(active0, 0L, active1, 0x401004000000L);
      case 116:
         return jjMoveStringLiteralDfa18_0(active0, 0x2000000L, active1, 0x81c800204000L);
      case 121:
         return jjMoveStringLiteralDfa18_0(active0, 0L, active1, 0x80000000000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 17);
}
static private final int jjMoveStringLiteralDfa18_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 17);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 17);
   }
   switch(curChar)
   {
      case 66:
         return jjMoveStringLiteralDfa19_0(active0, 0L, active1, 0x10000L);
      case 68:
         return jjMoveStringLiteralDfa19_0(active0, 0L, active1, 0x200040000000L);
      case 69:
         if ((active0 & 0x10000L) != 0L)
         {
            jjmatchedKind = 16;
            jjmatchedPos = 18;
         }
         return jjMoveStringLiteralDfa19_0(active0, 0x1000000000000L, active1, 0x140008002000L);
      case 71:
         return jjMoveStringLiteralDfa19_0(active0, 0L, active1, 0x40000L);
      case 72:
         return jjMoveStringLiteralDfa19_0(active0, 0L, active1, 0x800000000000L);
      case 73:
         return jjMoveStringLiteralDfa19_0(active0, 0x2000000002000000L, active1, 0x2200000L);
      case 76:
         if ((active1 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 117;
            jjmatchedPos = 18;
         }
         return jjMoveStringLiteralDfa19_0(active0, 0L, active1, 0x401004000000L);
      case 78:
         return jjMoveStringLiteralDfa19_0(active0, 0x4000000000000L, active1, 0L);
      case 79:
         return jjMoveStringLiteralDfa19_0(active0, 0x1000000L, active1, 0x2000000000L);
      case 83:
         return jjMoveStringLiteralDfa19_0(active0, 0x800000000000L, active1, 0x30000000L);
      case 84:
         if ((active1 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 114;
            jjmatchedPos = 18;
         }
         return jjMoveStringLiteralDfa19_0(active0, 0L, active1, 0x20000004000L);
      case 85:
         return jjMoveStringLiteralDfa19_0(active0, 0x20000000L, active1, 0x8000L);
      case 89:
         return jjMoveStringLiteralDfa19_0(active0, 0L, active1, 0x1c800000000L);
      case 95:
         return jjMoveStringLiteralDfa19_0(active0, 0L, active1, 0x80080020000L);
      case 98:
         return jjMoveStringLiteralDfa19_0(active0, 0L, active1, 0x10000L);
      case 100:
         return jjMoveStringLiteralDfa19_0(active0, 0L, active1, 0x200040000000L);
      case 101:
         if ((active0 & 0x10000L) != 0L)
         {
            jjmatchedKind = 16;
            jjmatchedPos = 18;
         }
         return jjMoveStringLiteralDfa19_0(active0, 0x1000000000000L, active1, 0x140008002000L);
      case 103:
         return jjMoveStringLiteralDfa19_0(active0, 0L, active1, 0x40000L);
      case 104:
         return jjMoveStringLiteralDfa19_0(active0, 0L, active1, 0x800000000000L);
      case 105:
         return jjMoveStringLiteralDfa19_0(active0, 0x2000000002000000L, active1, 0x2200000L);
      case 108:
         if ((active1 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 117;
            jjmatchedPos = 18;
         }
         return jjMoveStringLiteralDfa19_0(active0, 0L, active1, 0x401004000000L);
      case 110:
         return jjMoveStringLiteralDfa19_0(active0, 0x4000000000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa19_0(active0, 0x1000000L, active1, 0x2000000000L);
      case 115:
         return jjMoveStringLiteralDfa19_0(active0, 0x800000000000L, active1, 0x30000000L);
      case 116:
         if ((active1 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 114;
            jjmatchedPos = 18;
         }
         return jjMoveStringLiteralDfa19_0(active0, 0L, active1, 0x20000004000L);
      case 117:
         return jjMoveStringLiteralDfa19_0(active0, 0x20000000L, active1, 0x8000L);
      case 121:
         return jjMoveStringLiteralDfa19_0(active0, 0L, active1, 0x1c800000000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 18);
}
static private final int jjMoveStringLiteralDfa19_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 18);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 18);
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa20_0(active0, 0L, active1, 0x2000L);
      case 69:
         return jjMoveStringLiteralDfa20_0(active0, 0L, active1, 0x200040000000L);
      case 72:
         return jjMoveStringLiteralDfa20_0(active0, 0L, active1, 0x20000000000L);
      case 73:
         return jjMoveStringLiteralDfa20_0(active0, 0L, active1, 0x401004024000L);
      case 76:
         return jjMoveStringLiteralDfa20_0(active0, 0L, active1, 0x30000000L);
      case 78:
         if ((active0 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 24;
            jjmatchedPos = 19;
         }
         return jjMoveStringLiteralDfa20_0(active0, 0L, active1, 0x2000200000L);
      case 79:
         return jjMoveStringLiteralDfa20_0(active0, 0x800002000000L, active1, 0L);
      case 82:
         if ((active1 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 91;
            jjmatchedPos = 19;
         }
         else if ((active1 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 108;
            jjmatchedPos = 19;
         }
         return jjMoveStringLiteralDfa20_0(active0, 0L, active1, 0x800000000000L);
      case 83:
         return jjMoveStringLiteralDfa20_0(active0, 0x20000000L, active1, 0x40080000000L);
      case 84:
         if ((active0 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 19;
         }
         return jjMoveStringLiteralDfa20_0(active0, 0x2000000000000000L, active1, 0x80002008000L);
      case 85:
         return jjMoveStringLiteralDfa20_0(active0, 0L, active1, 0x10000L);
      case 95:
         return jjMoveStringLiteralDfa20_0(active0, 0x1000000000000L, active1, 0x1c800040000L);
      case 99:
         return jjMoveStringLiteralDfa20_0(active0, 0L, active1, 0x2000L);
      case 101:
         return jjMoveStringLiteralDfa20_0(active0, 0L, active1, 0x200040000000L);
      case 104:
         return jjMoveStringLiteralDfa20_0(active0, 0L, active1, 0x20000000000L);
      case 105:
         return jjMoveStringLiteralDfa20_0(active0, 0L, active1, 0x401004024000L);
      case 108:
         return jjMoveStringLiteralDfa20_0(active0, 0L, active1, 0x30000000L);
      case 110:
         if ((active0 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 24;
            jjmatchedPos = 19;
         }
         return jjMoveStringLiteralDfa20_0(active0, 0L, active1, 0x2000200000L);
      case 111:
         return jjMoveStringLiteralDfa20_0(active0, 0x800002000000L, active1, 0L);
      case 114:
         if ((active1 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 91;
            jjmatchedPos = 19;
         }
         else if ((active1 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 108;
            jjmatchedPos = 19;
         }
         return jjMoveStringLiteralDfa20_0(active0, 0L, active1, 0x800000000000L);
      case 115:
         return jjMoveStringLiteralDfa20_0(active0, 0x20000000L, active1, 0x40080000000L);
      case 116:
         if ((active0 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 19;
         }
         return jjMoveStringLiteralDfa20_0(active0, 0x2000000000000000L, active1, 0x80002008000L);
      case 117:
         return jjMoveStringLiteralDfa20_0(active0, 0L, active1, 0x10000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 19);
}
static private final int jjMoveStringLiteralDfa20_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 19);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 19);
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa21_0(active0, 0L, active1, 0x10000000000L);
      case 68:
         return jjMoveStringLiteralDfa21_0(active0, 0L, active1, 0x409004000000L);
      case 69:
         return jjMoveStringLiteralDfa21_0(active0, 0x20000000L, active1, 0x800002000000L);
      case 71:
         return jjMoveStringLiteralDfa21_0(active0, 0L, active1, 0x200000L);
      case 72:
         return jjMoveStringLiteralDfa21_0(active0, 0L, active1, 0xc0000000000L);
      case 73:
         return jjMoveStringLiteralDfa21_0(active0, 0L, active1, 0x30048000L);
      case 76:
         return jjMoveStringLiteralDfa21_0(active0, 0L, active1, 0x80000000L);
      case 77:
         return jjMoveStringLiteralDfa21_0(active0, 0x2000000000000000L, active1, 0x4000L);
      case 78:
         if ((active0 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 25;
            jjmatchedPos = 20;
         }
         return jjMoveStringLiteralDfa21_0(active0, 0L, active1, 0x20000L);
      case 79:
         return jjMoveStringLiteralDfa21_0(active0, 0L, active1, 0x2000L);
      case 81:
         return jjMoveStringLiteralDfa21_0(active0, 0L, active1, 0x4000000000L);
      case 82:
         if ((active1 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 94;
            jjmatchedPos = 20;
         }
         else if ((active1 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 109;
            jjmatchedPos = 20;
         }
         return jjMoveStringLiteralDfa21_0(active0, 0x1000000000000L, active1, 0x20000000000L);
      case 83:
         return jjMoveStringLiteralDfa21_0(active0, 0L, active1, 0x800000000L);
      case 84:
         return jjMoveStringLiteralDfa21_0(active0, 0L, active1, 0x10000L);
      case 85:
         return jjMoveStringLiteralDfa21_0(active0, 0x800000000000L, active1, 0L);
      case 95:
         return jjMoveStringLiteralDfa21_0(active0, 0L, active1, 0x2000000000L);
      case 99:
         return jjMoveStringLiteralDfa21_0(active0, 0L, active1, 0x10000000000L);
      case 100:
         return jjMoveStringLiteralDfa21_0(active0, 0L, active1, 0x409004000000L);
      case 101:
         return jjMoveStringLiteralDfa21_0(active0, 0x20000000L, active1, 0x800002000000L);
      case 103:
         return jjMoveStringLiteralDfa21_0(active0, 0L, active1, 0x200000L);
      case 104:
         return jjMoveStringLiteralDfa21_0(active0, 0L, active1, 0xc0000000000L);
      case 105:
         return jjMoveStringLiteralDfa21_0(active0, 0L, active1, 0x30048000L);
      case 108:
         return jjMoveStringLiteralDfa21_0(active0, 0L, active1, 0x80000000L);
      case 109:
         return jjMoveStringLiteralDfa21_0(active0, 0x2000000000000000L, active1, 0x4000L);
      case 110:
         if ((active0 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 25;
            jjmatchedPos = 20;
         }
         return jjMoveStringLiteralDfa21_0(active0, 0L, active1, 0x20000L);
      case 111:
         return jjMoveStringLiteralDfa21_0(active0, 0L, active1, 0x2000L);
      case 113:
         return jjMoveStringLiteralDfa21_0(active0, 0L, active1, 0x4000000000L);
      case 114:
         if ((active1 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 94;
            jjmatchedPos = 20;
         }
         else if ((active1 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 109;
            jjmatchedPos = 20;
         }
         return jjMoveStringLiteralDfa21_0(active0, 0x1000000000000L, active1, 0x20000000000L);
      case 115:
         return jjMoveStringLiteralDfa21_0(active0, 0L, active1, 0x800000000L);
      case 116:
         return jjMoveStringLiteralDfa21_0(active0, 0L, active1, 0x10000L);
      case 117:
         return jjMoveStringLiteralDfa21_0(active0, 0x800000000000L, active1, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 20);
}
static private final int jjMoveStringLiteralDfa21_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 20);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 20);
   }
   switch(curChar)
   {
      case 68:
         if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 21;
         }
         return jjMoveStringLiteralDfa22_0(active0, 0L, active1, 0x30000000L);
      case 69:
         return jjMoveStringLiteralDfa22_0(active0, 0x2001000000000000L, active1, 0x421004004000L);
      case 70:
         return jjMoveStringLiteralDfa22_0(active0, 0L, active1, 0x20000L);
      case 73:
         return jjMoveStringLiteralDfa22_0(active0, 0L, active1, 0x80010000L);
      case 76:
         return jjMoveStringLiteralDfa22_0(active0, 0L, active1, 0x800000000L);
      case 78:
         return jjMoveStringLiteralDfa22_0(active0, 0L, active1, 0x42000L);
      case 79:
         return jjMoveStringLiteralDfa22_0(active0, 0L, active1, 0x50000008000L);
      case 82:
         return jjMoveStringLiteralDfa22_0(active0, 0x800000000000L, active1, 0x80002000000L);
      case 83:
         return jjMoveStringLiteralDfa22_0(active0, 0L, active1, 0x802000000000L);
      case 85:
         return jjMoveStringLiteralDfa22_0(active0, 0L, active1, 0xc000000000L);
      case 95:
         return jjMoveStringLiteralDfa22_0(active0, 0L, active1, 0x200000L);
      case 100:
         if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 21;
         }
         return jjMoveStringLiteralDfa22_0(active0, 0L, active1, 0x30000000L);
      case 101:
         return jjMoveStringLiteralDfa22_0(active0, 0x2001000000000000L, active1, 0x421004004000L);
      case 102:
         return jjMoveStringLiteralDfa22_0(active0, 0L, active1, 0x20000L);
      case 105:
         return jjMoveStringLiteralDfa22_0(active0, 0L, active1, 0x80010000L);
      case 108:
         return jjMoveStringLiteralDfa22_0(active0, 0L, active1, 0x800000000L);
      case 110:
         return jjMoveStringLiteralDfa22_0(active0, 0L, active1, 0x42000L);
      case 111:
         return jjMoveStringLiteralDfa22_0(active0, 0L, active1, 0x50000008000L);
      case 114:
         return jjMoveStringLiteralDfa22_0(active0, 0x800000000000L, active1, 0x80002000000L);
      case 115:
         return jjMoveStringLiteralDfa22_0(active0, 0L, active1, 0x802000000000L);
      case 117:
         return jjMoveStringLiteralDfa22_0(active0, 0L, active1, 0xc000000000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 21);
}
static private final int jjMoveStringLiteralDfa22_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 21);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 21);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa23_0(active0, 0L, active1, 0x4000000000L);
      case 66:
         return jjMoveStringLiteralDfa23_0(active0, 0L, active1, 0x200000L);
      case 67:
         return jjMoveStringLiteralDfa23_0(active0, 0x800000000000L, active1, 0L);
      case 68:
         return jjMoveStringLiteralDfa23_0(active0, 0L, active1, 0x80002000L);
      case 69:
         return jjMoveStringLiteralDfa23_0(active0, 0L, active1, 0x80030000000L);
      case 70:
         return jjMoveStringLiteralDfa23_0(active0, 0L, active1, 0x40000L);
      case 72:
         return jjMoveStringLiteralDfa23_0(active0, 0L, active1, 0x800000000000L);
      case 73:
         return jjMoveStringLiteralDfa23_0(active0, 0L, active1, 0x802000000L);
      case 76:
         return jjMoveStringLiteralDfa23_0(active0, 0L, active1, 0x42000000000L);
      case 78:
         if ((active1 & 0x8000L) != 0L)
         {
            jjmatchedKind = 79;
            jjmatchedPos = 22;
         }
         return jjMoveStringLiteralDfa23_0(active0, 0x2000000000000000L, active1, 0L);
      case 79:
         if ((active1 & 0x20000L) != 0L)
         {
            jjmatchedKind = 81;
            jjmatchedPos = 22;
         }
         return jjMoveStringLiteralDfa23_0(active0, 0L, active1, 0x10000L);
      case 82:
         if ((active1 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 22;
         }
         else if ((active1 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 100;
            jjmatchedPos = 22;
         }
         else if ((active1 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 110;
            jjmatchedPos = 22;
         }
         return jjMoveStringLiteralDfa23_0(active0, 0L, active1, 0x8000000000L);
      case 83:
         return jjMoveStringLiteralDfa23_0(active0, 0x1000000000000L, active1, 0x30000000000L);
      case 95:
         return jjMoveStringLiteralDfa23_0(active0, 0L, active1, 0x4000L);
      case 97:
         return jjMoveStringLiteralDfa23_0(active0, 0L, active1, 0x4000000000L);
      case 98:
         return jjMoveStringLiteralDfa23_0(active0, 0L, active1, 0x200000L);
      case 99:
         return jjMoveStringLiteralDfa23_0(active0, 0x800000000000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa23_0(active0, 0L, active1, 0x80002000L);
      case 101:
         return jjMoveStringLiteralDfa23_0(active0, 0L, active1, 0x80030000000L);
      case 102:
         return jjMoveStringLiteralDfa23_0(active0, 0L, active1, 0x40000L);
      case 104:
         return jjMoveStringLiteralDfa23_0(active0, 0L, active1, 0x800000000000L);
      case 105:
         return jjMoveStringLiteralDfa23_0(active0, 0L, active1, 0x802000000L);
      case 108:
         return jjMoveStringLiteralDfa23_0(active0, 0L, active1, 0x42000000000L);
      case 110:
         if ((active1 & 0x8000L) != 0L)
         {
            jjmatchedKind = 79;
            jjmatchedPos = 22;
         }
         return jjMoveStringLiteralDfa23_0(active0, 0x2000000000000000L, active1, 0L);
      case 111:
         if ((active1 & 0x20000L) != 0L)
         {
            jjmatchedKind = 81;
            jjmatchedPos = 22;
         }
         return jjMoveStringLiteralDfa23_0(active0, 0L, active1, 0x10000L);
      case 114:
         if ((active1 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 90;
            jjmatchedPos = 22;
         }
         else if ((active1 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 100;
            jjmatchedPos = 22;
         }
         else if ((active1 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 110;
            jjmatchedPos = 22;
         }
         return jjMoveStringLiteralDfa23_0(active0, 0L, active1, 0x8000000000L);
      case 115:
         return jjMoveStringLiteralDfa23_0(active0, 0x1000000000000L, active1, 0x30000000000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 22);
}
static private final int jjMoveStringLiteralDfa23_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 22);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 22);
   }
   switch(curChar)
   {
      case 65:
         if ((active1 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 23;
         }
         return jjMoveStringLiteralDfa24_0(active0, 0L, active1, 0x8000000000L);
      case 68:
         if ((active1 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 106;
            jjmatchedPos = 23;
         }
         return jjMoveStringLiteralDfa24_0(active0, 0L, active1, 0x800000000L);
      case 69:
         if ((active0 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 47;
            jjmatchedPos = 23;
         }
         return jjMoveStringLiteralDfa24_0(active0, 0L, active1, 0x80000000L);
      case 72:
         return jjMoveStringLiteralDfa24_0(active0, 0L, active1, 0x20000000000L);
      case 73:
         return jjMoveStringLiteralDfa24_0(active0, 0L, active1, 0x2000002000L);
      case 76:
         return jjMoveStringLiteralDfa24_0(active0, 0L, active1, 0x4000000000L);
      case 78:
         if ((active1 & 0x10000L) != 0L)
         {
            jjmatchedKind = 80;
            jjmatchedPos = 23;
         }
         break;
      case 79:
         if ((active1 & 0x40000L) != 0L)
         {
            jjmatchedKind = 82;
            jjmatchedPos = 23;
         }
         return jjMoveStringLiteralDfa24_0(active0, 0x1000000000000L, active1, 0x800000000000L);
      case 80:
         return jjMoveStringLiteralDfa24_0(active0, 0L, active1, 0x4000L);
      case 82:
         if ((active1 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 92;
            jjmatchedPos = 23;
         }
         else if ((active1 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 93;
            jjmatchedPos = 23;
         }
         break;
      case 83:
         return jjMoveStringLiteralDfa24_0(active0, 0L, active1, 0x80000000000L);
      case 84:
         if ((active0 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 23;
         }
         return jjMoveStringLiteralDfa24_0(active0, 0L, active1, 0x10000000000L);
      case 85:
         return jjMoveStringLiteralDfa24_0(active0, 0L, active1, 0x200000L);
      case 97:
         if ((active1 & 0x2000000L) != 0L)
         {
            jjmatchedKind = 89;
            jjmatchedPos = 23;
         }
         return jjMoveStringLiteralDfa24_0(active0, 0L, active1, 0x8000000000L);
      case 100:
         if ((active1 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 106;
            jjmatchedPos = 23;
         }
         return jjMoveStringLiteralDfa24_0(active0, 0L, active1, 0x800000000L);
      case 101:
         if ((active0 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 47;
            jjmatchedPos = 23;
         }
         return jjMoveStringLiteralDfa24_0(active0, 0L, active1, 0x80000000L);
      case 104:
         return jjMoveStringLiteralDfa24_0(active0, 0L, active1, 0x20000000000L);
      case 105:
         return jjMoveStringLiteralDfa24_0(active0, 0L, active1, 0x2000002000L);
      case 108:
         return jjMoveStringLiteralDfa24_0(active0, 0L, active1, 0x4000000000L);
      case 110:
         if ((active1 & 0x10000L) != 0L)
         {
            jjmatchedKind = 80;
            jjmatchedPos = 23;
         }
         break;
      case 111:
         if ((active1 & 0x40000L) != 0L)
         {
            jjmatchedKind = 82;
            jjmatchedPos = 23;
         }
         return jjMoveStringLiteralDfa24_0(active0, 0x1000000000000L, active1, 0x800000000000L);
      case 112:
         return jjMoveStringLiteralDfa24_0(active0, 0L, active1, 0x4000L);
      case 114:
         if ((active1 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 92;
            jjmatchedPos = 23;
         }
         else if ((active1 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 93;
            jjmatchedPos = 23;
         }
         break;
      case 115:
         return jjMoveStringLiteralDfa24_0(active0, 0L, active1, 0x80000000000L);
      case 116:
         if ((active0 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 23;
         }
         return jjMoveStringLiteralDfa24_0(active0, 0L, active1, 0x10000000000L);
      case 117:
         return jjMoveStringLiteralDfa24_0(active0, 0L, active1, 0x200000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 23);
}
static private final int jjMoveStringLiteralDfa24_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 23);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 23);
   }
   switch(curChar)
   {
      case 68:
         return jjMoveStringLiteralDfa25_0(active0, 0L, active1, 0x2000000000L);
      case 69:
         return jjMoveStringLiteralDfa25_0(active0, 0L, active1, 0x800000000L);
      case 72:
         return jjMoveStringLiteralDfa25_0(active0, 0L, active1, 0x80000000000L);
      case 73:
         return jjMoveStringLiteralDfa25_0(active0, 0L, active1, 0x4000000000L);
      case 76:
         return jjMoveStringLiteralDfa25_0(active0, 0L, active1, 0x800000000000L);
      case 78:
         return jjMoveStringLiteralDfa25_0(active0, 0L, active1, 0x200000L);
      case 79:
         return jjMoveStringLiteralDfa25_0(active0, 0L, active1, 0x20000000000L);
      case 82:
         if ((active1 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 24;
         }
         return jjMoveStringLiteralDfa25_0(active0, 0L, active1, 0x4000L);
      case 84:
         return jjMoveStringLiteralDfa25_0(active0, 0L, active1, 0x8000002000L);
      case 85:
         return jjMoveStringLiteralDfa25_0(active0, 0x1000000000000L, active1, 0L);
      case 95:
         return jjMoveStringLiteralDfa25_0(active0, 0L, active1, 0x10000000000L);
      case 100:
         return jjMoveStringLiteralDfa25_0(active0, 0L, active1, 0x2000000000L);
      case 101:
         return jjMoveStringLiteralDfa25_0(active0, 0L, active1, 0x800000000L);
      case 104:
         return jjMoveStringLiteralDfa25_0(active0, 0L, active1, 0x80000000000L);
      case 105:
         return jjMoveStringLiteralDfa25_0(active0, 0L, active1, 0x4000000000L);
      case 108:
         return jjMoveStringLiteralDfa25_0(active0, 0L, active1, 0x800000000000L);
      case 110:
         return jjMoveStringLiteralDfa25_0(active0, 0L, active1, 0x200000L);
      case 111:
         return jjMoveStringLiteralDfa25_0(active0, 0L, active1, 0x20000000000L);
      case 114:
         if ((active1 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 24;
         }
         return jjMoveStringLiteralDfa25_0(active0, 0L, active1, 0x4000L);
      case 116:
         return jjMoveStringLiteralDfa25_0(active0, 0L, active1, 0x8000002000L);
      case 117:
         return jjMoveStringLiteralDfa25_0(active0, 0x1000000000000L, active1, 0L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 24);
}
static private final int jjMoveStringLiteralDfa25_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 24);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 24);
   }
   switch(curChar)
   {
      case 68:
         return jjMoveStringLiteralDfa26_0(active0, 0L, active1, 0x800000200000L);
      case 69:
         return jjMoveStringLiteralDfa26_0(active0, 0L, active1, 0x2000004000L);
      case 73:
         return jjMoveStringLiteralDfa26_0(active0, 0L, active1, 0x8000002000L);
      case 76:
         return jjMoveStringLiteralDfa26_0(active0, 0L, active1, 0x20000000000L);
      case 79:
         return jjMoveStringLiteralDfa26_0(active0, 0L, active1, 0x80000000000L);
      case 82:
         if ((active1 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 99;
            jjmatchedPos = 25;
         }
         return jjMoveStringLiteralDfa26_0(active0, 0x1000000000000L, active1, 0L);
      case 83:
         return jjMoveStringLiteralDfa26_0(active0, 0L, active1, 0x10000000000L);
      case 84:
         return jjMoveStringLiteralDfa26_0(active0, 0L, active1, 0x4000000000L);
      case 100:
         return jjMoveStringLiteralDfa26_0(active0, 0L, active1, 0x800000200000L);
      case 101:
         return jjMoveStringLiteralDfa26_0(active0, 0L, active1, 0x2000004000L);
      case 105:
         return jjMoveStringLiteralDfa26_0(active0, 0L, active1, 0x8000002000L);
      case 108:
         return jjMoveStringLiteralDfa26_0(active0, 0L, active1, 0x20000000000L);
      case 111:
         return jjMoveStringLiteralDfa26_0(active0, 0L, active1, 0x80000000000L);
      case 114:
         if ((active1 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 99;
            jjmatchedPos = 25;
         }
         return jjMoveStringLiteralDfa26_0(active0, 0x1000000000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa26_0(active0, 0L, active1, 0x10000000000L);
      case 116:
         return jjMoveStringLiteralDfa26_0(active0, 0L, active1, 0x4000000000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 25);
}
static private final int jjMoveStringLiteralDfa26_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 25);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 25);
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa27_0(active0, 0x1000000000000L, active1, 0x4000L);
      case 68:
         if ((active1 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 105;
            jjmatchedPos = 26;
         }
         break;
      case 76:
         return jjMoveStringLiteralDfa27_0(active0, 0L, active1, 0x90000200000L);
      case 79:
         return jjMoveStringLiteralDfa27_0(active0, 0L, active1, 0x8000002000L);
      case 82:
         if ((active1 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 101;
            jjmatchedPos = 26;
         }
         break;
      case 89:
         return jjMoveStringLiteralDfa27_0(active0, 0L, active1, 0x4000000000L);
      case 95:
         return jjMoveStringLiteralDfa27_0(active0, 0L, active1, 0x800000000000L);
      case 99:
         return jjMoveStringLiteralDfa27_0(active0, 0x1000000000000L, active1, 0x4000L);
      case 100:
         if ((active1 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 105;
            jjmatchedPos = 26;
         }
         break;
      case 108:
         return jjMoveStringLiteralDfa27_0(active0, 0L, active1, 0x90000200000L);
      case 111:
         return jjMoveStringLiteralDfa27_0(active0, 0L, active1, 0x8000002000L);
      case 114:
         if ((active1 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 101;
            jjmatchedPos = 26;
         }
         break;
      case 121:
         return jjMoveStringLiteralDfa27_0(active0, 0L, active1, 0x4000000000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 26);
}
static private final int jjMoveStringLiteralDfa27_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 26);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 26);
   }
   switch(curChar)
   {
      case 68:
         if ((active1 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 107;
            jjmatchedPos = 27;
         }
         break;
      case 69:
         if ((active0 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 48;
            jjmatchedPos = 27;
         }
         else if ((active1 & 0x200000L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 27;
         }
         break;
      case 73:
         return jjMoveStringLiteralDfa28_0(active0, 0L, active1, 0x10000000000L);
      case 78:
         if ((active1 & 0x2000L) != 0L)
         {
            jjmatchedKind = 77;
            jjmatchedPos = 27;
         }
         return jjMoveStringLiteralDfa28_0(active0, 0L, active1, 0x8000000000L);
      case 79:
         return jjMoveStringLiteralDfa28_0(active0, 0L, active1, 0x4000L);
      case 83:
         return jjMoveStringLiteralDfa28_0(active0, 0L, active1, 0x800000000000L);
      case 95:
         return jjMoveStringLiteralDfa28_0(active0, 0L, active1, 0x4000000000L);
      case 100:
         if ((active1 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 107;
            jjmatchedPos = 27;
         }
         break;
      case 101:
         if ((active0 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 48;
            jjmatchedPos = 27;
         }
         else if ((active1 & 0x200000L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 27;
         }
         break;
      case 105:
         return jjMoveStringLiteralDfa28_0(active0, 0L, active1, 0x10000000000L);
      case 110:
         if ((active1 & 0x2000L) != 0L)
         {
            jjmatchedKind = 77;
            jjmatchedPos = 27;
         }
         return jjMoveStringLiteralDfa28_0(active0, 0L, active1, 0x8000000000L);
      case 111:
         return jjMoveStringLiteralDfa28_0(active0, 0L, active1, 0x4000L);
      case 115:
         return jjMoveStringLiteralDfa28_0(active0, 0L, active1, 0x800000000000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 27);
}
static private final int jjMoveStringLiteralDfa28_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 27);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 27);
   }
   switch(curChar)
   {
      case 68:
         return jjMoveStringLiteralDfa29_0(active1, 0x10000000000L);
      case 76:
         return jjMoveStringLiteralDfa29_0(active1, 0x800000000000L);
      case 78:
         return jjMoveStringLiteralDfa29_0(active1, 0x4000L);
      case 83:
         return jjMoveStringLiteralDfa29_0(active1, 0x4000000000L);
      case 95:
         return jjMoveStringLiteralDfa29_0(active1, 0x8000000000L);
      case 100:
         return jjMoveStringLiteralDfa29_0(active1, 0x10000000000L);
      case 108:
         return jjMoveStringLiteralDfa29_0(active1, 0x800000000000L);
      case 110:
         return jjMoveStringLiteralDfa29_0(active1, 0x4000L);
      case 115:
         return jjMoveStringLiteralDfa29_0(active1, 0x4000000000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 28);
}
static private final int jjMoveStringLiteralDfa29_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 28);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 28);
   }
   switch(curChar)
   {
      case 68:
         return jjMoveStringLiteralDfa30_0(active1, 0x4000L);
      case 69:
         return jjMoveStringLiteralDfa30_0(active1, 0x10000000000L);
      case 73:
         return jjMoveStringLiteralDfa30_0(active1, 0x800000000000L);
      case 76:
         return jjMoveStringLiteralDfa30_0(active1, 0x4000000000L);
      case 83:
         return jjMoveStringLiteralDfa30_0(active1, 0x8000000000L);
      case 100:
         return jjMoveStringLiteralDfa30_0(active1, 0x4000L);
      case 101:
         return jjMoveStringLiteralDfa30_0(active1, 0x10000000000L);
      case 105:
         return jjMoveStringLiteralDfa30_0(active1, 0x800000000000L);
      case 108:
         return jjMoveStringLiteralDfa30_0(active1, 0x4000000000L);
      case 115:
         return jjMoveStringLiteralDfa30_0(active1, 0x8000000000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 29);
}
static private final int jjMoveStringLiteralDfa30_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 29);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 29);
   }
   switch(curChar)
   {
      case 68:
         return jjMoveStringLiteralDfa31_0(active1, 0x800000000000L);
      case 73:
         return jjMoveStringLiteralDfa31_0(active1, 0x4000004000L);
      case 76:
         return jjMoveStringLiteralDfa31_0(active1, 0x8000000000L);
      case 82:
         if ((active1 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 104;
            jjmatchedPos = 30;
         }
         break;
      case 100:
         return jjMoveStringLiteralDfa31_0(active1, 0x800000000000L);
      case 105:
         return jjMoveStringLiteralDfa31_0(active1, 0x4000004000L);
      case 108:
         return jjMoveStringLiteralDfa31_0(active1, 0x8000000000L);
      case 114:
         if ((active1 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 104;
            jjmatchedPos = 30;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 30);
}
static private final int jjMoveStringLiteralDfa31_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 30);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 30);
   }
   switch(curChar)
   {
      case 68:
         return jjMoveStringLiteralDfa32_0(active1, 0x4000000000L);
      case 69:
         return jjMoveStringLiteralDfa32_0(active1, 0x800000000000L);
      case 73:
         return jjMoveStringLiteralDfa32_0(active1, 0x8000000000L);
      case 84:
         return jjMoveStringLiteralDfa32_0(active1, 0x4000L);
      case 100:
         return jjMoveStringLiteralDfa32_0(active1, 0x4000000000L);
      case 101:
         return jjMoveStringLiteralDfa32_0(active1, 0x800000000000L);
      case 105:
         return jjMoveStringLiteralDfa32_0(active1, 0x8000000000L);
      case 116:
         return jjMoveStringLiteralDfa32_0(active1, 0x4000L);
      default :
         break;
   }
   return jjMoveNfa_0(0, 31);
}
static private final int jjMoveStringLiteralDfa32_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 31);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 31);
   }
   switch(curChar)
   {
      case 68:
         return jjMoveStringLiteralDfa33_0(active1, 0x8000000000L);
      case 69:
         return jjMoveStringLiteralDfa33_0(active1, 0x4000000000L);
      case 73:
         return jjMoveStringLiteralDfa33_0(active1, 0x4000L);
      case 82:
         if ((active1 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 111;
            jjmatchedPos = 32;
         }
         break;
      case 100:
         return jjMoveStringLiteralDfa33_0(active1, 0x8000000000L);
      case 101:
         return jjMoveStringLiteralDfa33_0(active1, 0x4000000000L);
      case 105:
         return jjMoveStringLiteralDfa33_0(active1, 0x4000L);
      case 114:
         if ((active1 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 111;
            jjmatchedPos = 32;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 32);
}
static private final int jjMoveStringLiteralDfa33_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 32);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 32);
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa34_0(active1, 0x8000000000L);
      case 79:
         return jjMoveStringLiteralDfa34_0(active1, 0x4000L);
      case 82:
         if ((active1 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 102;
            jjmatchedPos = 33;
         }
         break;
      case 101:
         return jjMoveStringLiteralDfa34_0(active1, 0x8000000000L);
      case 111:
         return jjMoveStringLiteralDfa34_0(active1, 0x4000L);
      case 114:
         if ((active1 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 102;
            jjmatchedPos = 33;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 33);
}
static private final int jjMoveStringLiteralDfa34_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjMoveNfa_0(0, 33);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(0, 33);
   }
   switch(curChar)
   {
      case 78:
         if ((active1 & 0x4000L) != 0L)
         {
            jjmatchedKind = 78;
            jjmatchedPos = 34;
         }
         break;
      case 82:
         if ((active1 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 34;
         }
         break;
      case 110:
         if ((active1 & 0x4000L) != 0L)
         {
            jjmatchedKind = 78;
            jjmatchedPos = 34;
         }
         break;
      case 114:
         if ((active1 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 103;
            jjmatchedPos = 34;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(0, 34);
}
static private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
static private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
static private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static private final int jjMoveNfa_0(int startState, int curPos)
{
   int strKind = jjmatchedKind;
   int strPos = jjmatchedPos;
   int seenUpto;
   input_stream.backup(seenUpto = curPos + 1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { throw new Error("Internal Error"); }
   curPos = 0;
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 10;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff840000000000L & l) != 0L)
                  {
                     if (kind > 119)
                        kind = 119;
                     jjCheckNAdd(8);
                  }
                  else if (curChar == 59)
                     jjCheckNAddStates(0, 2);
                  if ((0x3ff600000000000L & l) != 0L)
                  {
                     if (kind > 118)
                        kind = 118;
                     jjCheckNAdd(6);
                  }
                  if ((0xa400f80200000000L & l) != 0L)
                  {
                     if (kind > 120)
                        kind = 120;
                     jjCheckNAdd(9);
                  }
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 2:
                  if ((0x2400L & l) != 0L && kind > 1)
                     kind = 1;
                  break;
               case 3:
                  if (curChar == 10 && kind > 1)
                     kind = 1;
                  break;
               case 4:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 5:
               case 6:
                  if ((0x3ff600000000000L & l) == 0L)
                     break;
                  if (kind > 118)
                     kind = 118;
                  jjCheckNAdd(6);
                  break;
               case 7:
                  if ((0x3ff840000000000L & l) == 0L)
                     break;
                  if (kind > 119)
                     kind = 119;
                  jjCheckNAdd(8);
                  break;
               case 8:
                  if ((0x53ffe40800000000L & l) == 0L)
                     break;
                  if (kind > 119)
                     kind = 119;
                  jjCheckNAdd(8);
                  break;
               case 9:
                  if ((0xa400f80200000000L & l) == 0L)
                     break;
                  if (kind > 120)
                     kind = 120;
                  jjCheckNAdd(9);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 119)
                        kind = 119;
                     jjCheckNAdd(8);
                  }
                  else if ((0x38000000b8000000L & l) != 0L)
                  {
                     if (kind > 120)
                        kind = 120;
                     jjCheckNAdd(9);
                  }
                  break;
               case 1:
                  jjAddStates(0, 2);
                  break;
               case 6:
                  if ((0x2000000020L & l) == 0L)
                     break;
                  if (kind > 118)
                     kind = 118;
                  jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 7:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 119)
                     kind = 119;
                  jjCheckNAdd(8);
                  break;
               case 8:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 119)
                     kind = 119;
                  jjCheckNAdd(8);
                  break;
               case 9:
                  if ((0x38000000b8000000L & l) == 0L)
                     break;
                  if (kind > 120)
                     kind = 120;
                  jjCheckNAdd(9);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(0, 2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 10 - (jjnewStateCnt = startsAt)))
         break;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { break; }
   }
   if (jjmatchedPos > strPos)
      return curPos;

   int toRet = Math.max(curPos, seenUpto);

   if (curPos < toRet)
      for (i = toRet - Math.min(curPos, seenUpto); i-- > 0; )
         try { curChar = input_stream.readChar(); }
         catch(java.io.IOException e) { throw new Error("Internal Error : Please send a bug report."); }

   if (jjmatchedPos < strPos)
   {
      jjmatchedKind = strKind;
      jjmatchedPos = strPos;
   }
   else if (jjmatchedPos == strPos && jjmatchedKind > strKind)
      jjmatchedKind = strKind;

   return toRet;
}
static final int[] jjnextStates = {
   1, 2, 4, 
};
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, "\50", "\51", null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, };
public static final String[] lexStateNames = {
   "DEFAULT", 
};
static final long[] jjtoToken = {
   0xffffffffffffff81L, 0x1ffffffffffffffL, 
};
static final long[] jjtoSkip = {
   0x7eL, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x2L, 0x0L, 
};
static protected SimpleCharStream input_stream;
static private final int[] jjrounds = new int[10];
static private final int[] jjstateSet = new int[20];
static protected char curChar;
public TTaemsGrammarTokenManager(SimpleCharStream stream)
{
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}
public TTaemsGrammarTokenManager(SimpleCharStream stream, int lexState)
{
   this(stream);
   SwitchTo(lexState);
}
static public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 10; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
static public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
static public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

public static Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }

   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         matchedToken.specialToken = specialToken;
         return matchedToken;
      }
      else
      {
         if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
         {
            matchedToken = jjFillToken();
            if (specialToken == null)
               specialToken = matchedToken;
            else
            {
               matchedToken.specialToken = specialToken;
               specialToken = (specialToken.next = matchedToken);
            }
         }
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

}
