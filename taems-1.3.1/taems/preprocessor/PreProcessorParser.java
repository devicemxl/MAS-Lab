/* Generated By:JavaCC: Do not edit this line. PreProcessorParser.java */
package taems.preprocessor;
import java.util.*;
import taems.*;
import utilities.Log;

public class PreProcessorParser implements PreProcessorParserConstants {

public static void main(String argv[]) throws ParseException {
       PreProcessorParser parser = new PreProcessorParser(System.in);
       boolean output=false;
       PreProcessor pre = parser.Input();
       taems.parser.ReadTTaems reader = null;

        Log log = Log.getDefault();
        log.setLevel(Log.LOG_EMERG);
        reader = new taems.parser.ReadTTaems(log);

       Hashtable ht = new Hashtable();
       for (int i=0; i<argv.length; i++) {
         if (argv[i].equals("-ptaems")) {
                System.out.println(pre.toString());
                output=true;
         }
         if (argv[i].equals("-tmpttaems")) {
              System.out.println(pre.toTTaems(ht));
              pre.reset();
              output=true;
              }
         if (argv[i].equals("-ttaems")) {
            taems.Taems task = reader.readTTaems(new java.io.StringReader(pre.toTTaems(ht)));
            System.out.println(task.toTTaems(Taems.V1_1));
            pre.reset();
            output=true;
             }
        }
        if (!output) {
            taems.Taems task = reader.readTTaems(new java.io.StringReader(pre.toTTaems(ht)));
            System.out.println(task.toTTaems(Taems.V1_1));
            }
        System.exit(0);
        }

  final public PreProcessor Input() throws ParseException {
        Token t = null;
        Block b;
  Vector v = new Vector();
        PreProcessor p = new PreProcessor();
    label_1:
    while (true) {
      v = readStandardBlocks(p);
      p.addBlocks(v);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
      case DEFINE:
      case DEFINENOW:
      case WHILE:
      case LPAREN:
      case RPAREN:
      case DOLLAR:
      case AT:
      case POUND:
      case AFFECT:
      case COMMA:
      case ID:
      case SPECIAL:
      case NUM:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
    }
    jj_consume_token(0);
    {if (true) return p;}
    throw new Error("Missing return statement in function");
  }

  final public Vector readStandardBlocks(PreProcessor p) throws ParseException {
        Vector v = new Vector();
        Block b;
    label_2:
    while (true) {
      if (jj_2_1(2)) {
        jj_consume_token(DEFINE);
        b = readDefine(p, false);
                      v.addElement(b);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DEFINENOW:
          jj_consume_token(DEFINENOW);
          b = readDefine(p, true);
                      v.addElement(b);
          break;
        case WHILE:
          jj_consume_token(WHILE);
          b = readWhile(p);
                      v.addElement(b);
          break;
        case IF:
          jj_consume_token(IF);
          b = readIf(p);
                      v.addElement(b);
          break;
        case LPAREN:
        case RPAREN:
        case DOLLAR:
        case AT:
        case POUND:
        case AFFECT:
        case COMMA:
        case ID:
        case SPECIAL:
        case NUM:
          b = readTTaems(p);
                      v.addElement(b);
          break;
        default:
          jj_la1[1] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF:
      case DEFINE:
      case DEFINENOW:
      case WHILE:
      case LPAREN:
      case RPAREN:
      case DOLLAR:
      case AT:
      case POUND:
      case AFFECT:
      case COMMA:
      case ID:
      case SPECIAL:
      case NUM:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
    }
          {if (true) return v;}
    throw new Error("Missing return statement in function");
  }

  final public TaemsBlock readTTaems(PreProcessor p) throws ParseException {
        String r = "", answer = "", tmp;
        TaemsBlock b = new TaemsBlock(p);
        Block b2;
        Token t;
        Vector v;
    label_3:
    while (true) {
      if (jj_2_2(2)) {
        jj_consume_token(DOLLAR);
        t = jj_consume_token(ID);
                         //r = r + " $" + t.image ;
                         b2 = new Variable(p,t.image);
                         if(!r.equals("")) {
                           TaemsBlock b1 = new TaemsBlock(p);
                           b1.setTaems(r+" ");
                           r = "";
                           b.addSubBlock(b1);
                               }
                         b.addSubBlock(b2);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AT:
          jj_consume_token(AT);
          t = jj_consume_token(ID);
                         //r = r + " @" + t.image ;
                         b2 = new List(p,t.image);
                         if(!r.equals("")) {
                            TaemsBlock b1 = new TaemsBlock(p);
                            b1.setTaems(r+" ");
                            r = "";
                            b.addSubBlock(b1);
                               }
                         b.addSubBlock(b2);
          break;
        case POUND:
          jj_consume_token(POUND);
          b2 = readFunction(p);
            if(!r.equals("")) {
                          TaemsBlock b1 = new TaemsBlock(p);
                          b1.setTaems(r);
                          r = "";
                          b.addSubBlock(b1);
                              }
                        b.addSubBlock(b2);
          break;
        case COMMA:
          jj_consume_token(COMMA);
                  r = r + ",";
          break;
        case AFFECT:
          jj_consume_token(AFFECT);
                  r = r + "=";
          break;
        case SPECIAL:
          t = jj_consume_token(SPECIAL);
                  r = r + t.image;
          break;
        case ID:
          t = jj_consume_token(ID);
                  r = r + " " + t.image;
          break;
        case NUM:
          t = jj_consume_token(NUM);
                  r = r + " " + t.image;
          break;
        case LPAREN:
          jj_consume_token(LPAREN);
            r = r + "\t(";
          break;
        case RPAREN:
          jj_consume_token(RPAREN);
            r = r + "\t)";
          break;
        default:
          jj_la1[3] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
      case RPAREN:
      case DOLLAR:
      case AT:
      case POUND:
      case AFFECT:
      case COMMA:
      case ID:
      case SPECIAL:
      case NUM:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_3;
      }
    }
          if(!r.equals("")) {
             b.setTaems(r);
          }
          {if (true) return b;}
    throw new Error("Missing return statement in function");
  }

  final public Block readFunction(PreProcessor p) throws ParseException {
  Block b=null;
  String r="",answer="";
  Object n1, n2;
  Vector v;
  Token t1,t2;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RANDOMFLOAT:
      jj_consume_token(RANDOMFLOAT);
      jj_consume_token(LPAREN);
      n1 = readArgument(p);
      jj_consume_token(COMMA);
      n2 = readArgument(p);
      jj_consume_token(RPAREN);
                                                                               b = new randomFunction(p,randomFunction.FLOAT, n1, n2);
      break;
    case SUM:
      jj_consume_token(SUM);
      jj_consume_token(LPAREN);
      v = readArguments(p);
      jj_consume_token(RPAREN);
    b = new sumFunction(p, v);
      break;
    case DIFF:
      jj_consume_token(DIFF);
      jj_consume_token(LPAREN);
      v = readArguments(p);
      jj_consume_token(RPAREN);
     b = new diffFunction(p, v);
      break;
    case QUOT:
      jj_consume_token(QUOT);
      jj_consume_token(LPAREN);
      v = readArguments(p);
      jj_consume_token(RPAREN);
     b = new quotFunction(p, v);
      break;
    case ROUND:
      jj_consume_token(ROUND);
      jj_consume_token(LPAREN);
      v = readArguments(p);
      jj_consume_token(RPAREN);
     b = new roundFunction(p, v);
      break;
    case TRIM:
      jj_consume_token(TRIM);
      jj_consume_token(LPAREN);
      v = readArguments(p);
      jj_consume_token(RPAREN);
     b = new trimFunction(p, v);
      break;
    case SPACE:
      jj_consume_token(SPACE);
      jj_consume_token(LPAREN);
      v = readArguments(p);
      jj_consume_token(RPAREN);
     b = new spaceFunction(p, v);
      break;
    case DEF:
      jj_consume_token(DEF);
      jj_consume_token(LPAREN);
      v = readArguments(p);
      jj_consume_token(RPAREN);
     b = new defFunction(p, v);
      break;
    case NDEF:
      jj_consume_token(NDEF);
      jj_consume_token(LPAREN);
      v = readArguments(p);
      jj_consume_token(RPAREN);
     b = new ndefFunction(p, v);
      break;
    case CONCAT:
      jj_consume_token(CONCAT);
      jj_consume_token(LPAREN);
      v = readArguments(p);
      jj_consume_token(RPAREN);
     b = new concatFunction(p, v);
      break;
    case LENGTH:
      jj_consume_token(LENGTH);
      jj_consume_token(LPAREN);
      v = readArguments(p);
      jj_consume_token(RPAREN);
     b = new lengthFunction(p, v);
      break;
    case GETITEMAT:
      jj_consume_token(GETITEMAT);
      jj_consume_token(LPAREN);
      v = readArguments(p);
      jj_consume_token(RPAREN);
     b = new getitematFunction(p, v);
      break;
    case ADDITEMAT:
      jj_consume_token(ADDITEMAT);
      jj_consume_token(LPAREN);
      v = readArguments(p);
      jj_consume_token(RPAREN);
     b = new additematFunction(p, v);
      break;
    case DELITEMAT:
      jj_consume_token(DELITEMAT);
      jj_consume_token(LPAREN);
      v = readArguments(p);
      jj_consume_token(RPAREN);
     b = new delitematFunction(p, v);
      break;
    case RANDOMINT:
      jj_consume_token(RANDOMINT);
      jj_consume_token(LPAREN);
      n1 = readArgument(p);
      jj_consume_token(COMMA);
      n2 = readArgument(p);
      jj_consume_token(RPAREN);
                                                                              b = new randomFunction(p,randomFunction.INT, n1, n2);
      break;
    case RANDOMLIST:
      jj_consume_token(RANDOMLIST);
      jj_consume_token(LPAREN);
      v = readArguments(p);
      jj_consume_token(RPAREN);
   b = new randomListFunction(p,v);
      break;
    case PROD:
      jj_consume_token(PROD);
      jj_consume_token(LPAREN);
      v = readArguments(p);
      jj_consume_token(RPAREN);
     b = new prodFunction(p, v);
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    if (b == null){
        b = new TaemsBlock(p);
        ((TaemsBlock)b).setTaems(r);
        }
         {if (true) return(b);}
    throw new Error("Missing return statement in function");
  }

  final public Object readArgument(PreProcessor p) throws ParseException {
  String r="",answer;
  Token t;
  Block b;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUM:
      t = jj_consume_token(NUM);
              r = t.image;
      break;
    case ID:
      t = jj_consume_token(ID);
             r = t.image;
      break;
    case DOLLAR:
      jj_consume_token(DOLLAR);
      t = jj_consume_token(ID);
                      {if (true) return(new Variable(p, t.image));}
      break;
    case AT:
      jj_consume_token(AT);
      t = jj_consume_token(ID);
                  {if (true) return(new List(p, t.image));}
      break;
    case 49:
      jj_consume_token(49);
      r = readText();
      break;
    case POUND:
      jj_consume_token(POUND);
      b = readFunction(p);
                                {if (true) return(b);}
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
   {if (true) return r;}
    throw new Error("Missing return statement in function");
  }

  final public Vector readArguments(PreProcessor p) throws ParseException {
  Object answer;
  Vector v = new Vector();
  Token t;
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOLLAR:
      case AT:
      case POUND:
      case ID:
      case NUM:
      case 49:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_4;
      }
      answer = readArgument(p);
      v.addElement(answer);
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[8] = jj_gen;
          break label_5;
        }
        jj_consume_token(COMMA);
      }
    }
    {if (true) return(v);}
    throw new Error("Missing return statement in function");
  }

  final public DefineBlock readDefine(PreProcessor p, boolean i) throws ParseException {
  Token t=new Token(),t1;
  DefineBlock d=null;
  Block b;
  Vector v;
  String tmp;
    if (jj_2_3(3)) {
      t = jj_consume_token(ID);
      jj_consume_token(AFFECT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 49:
        jj_consume_token(49);
        tmp = readText();
                              d = new DefineBlock(p, t.image, i,true);
                              TaemsBlock tb = new TaemsBlock(p);
                              tb.setTaems(tmp);
                              d.addSubBlock(tb);
        break;
      case POUND:
        jj_consume_token(POUND);
        b = readFunction(p);
                              d = new DefineBlock(p, t.image, i,true);
                              d.addSubBlock(b);
        break;
      case AT:
        jj_consume_token(AT);
        jj_consume_token(LPAREN);
        v = readArguments(p);
        jj_consume_token(RPAREN);
                              d = new ListBlock(p, t.image, v, i,true);
        break;
      case ID:
      case NUM:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ID:
          t1 = jj_consume_token(ID);
          break;
        case NUM:
          t1 = jj_consume_token(NUM);
          break;
        default:
          jj_la1[9] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
                              d = new DefineBlock(p, t.image, i,true);
                              tb = new TaemsBlock(p);
                              tb.setTaems(t1.image);
                              d.addSubBlock(tb);
        break;
      case DOLLAR:
        jj_consume_token(DOLLAR);
        t1 = jj_consume_token(ID);
                              d = new DefineBlock(p, t.image, i,true);
                              b = new Variable(p, t1.image);
                              d.addSubBlock(b);
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        t = jj_consume_token(ID);
        v = readStandardBlocks(p);
        jj_consume_token(ENDDEFINE);
        d = new DefineBlock(p, t.image, i,false);
                    d.addSubBlocks(v);
        break;
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
                {if (true) return d;}
    throw new Error("Missing return statement in function");
  }

  final public String readText() throws ParseException {
  String s="";
  Token t;
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOLLAR:
      case ID:
      case SPECIAL:
      case NUM:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_6;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        t = jj_consume_token(ID);
         if (s.equals(""))
                       s = t.image;
                     else
                             s = s + " " + t.image;
        break;
      case SPECIAL:
        t = jj_consume_token(SPECIAL);
         if (s.equals(""))
                       s = t.image;
                     else
                             s = s + " " +t.image;
        break;
      case DOLLAR:
        jj_consume_token(DOLLAR);
        t = jj_consume_token(ID);
         if (s.equals(""))
                       s = t.image;
                     else
           s = s + " $" + t.image;
        break;
      case NUM:
        t = jj_consume_token(NUM);
         if (s.equals(""))
                       s = t.image;
                     else
           s = s + " " + t.image;
        break;
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(49);
           {if (true) return(s);}
    throw new Error("Missing return statement in function");
  }

  final public WhileBlock readWhile(PreProcessor p) throws ParseException {
        WhileBlock b = new WhileBlock(p);
        Condition c;
        Vector v;
    jj_consume_token(LPAREN);
    c = readMultipleConditions(p);
    jj_consume_token(RPAREN);
    v = readStandardBlocks(p);
    jj_consume_token(ENDWHILE);
                b.setCondition(c);
                b.addSubBlocks(v);
                {if (true) return b;}
    throw new Error("Missing return statement in function");
  }

  final public IfBlock readIf(PreProcessor p) throws ParseException {
        IfBlock b = new IfBlock(p),b1;
        TaemsBlock t;
        Condition c;
        Vector v;
    jj_consume_token(LPAREN);
    c = readMultipleConditions(p);
    jj_consume_token(RPAREN);
    v = readStandardBlocks(p);
                        b.setCondition(c);
                        b.addIfs(v);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELSEIF:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_7;
      }
      jj_consume_token(ELSEIF);
      jj_consume_token(LPAREN);
      c = readMultipleConditions(p);
      jj_consume_token(RPAREN);
      v = readStandardBlocks(p);
                                b1 = new IfBlock(p);
                                b1.setCondition(c);
                                b1.addIfs(v);
                                b.addElseIf(b1);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      jj_consume_token(ELSE);
      v = readStandardBlocks(p);
      jj_consume_token(ENDIF);
                                        b.addElses(v);
      break;
    case ENDIF:
      jj_consume_token(ENDIF);
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return b;}
    throw new Error("Missing return statement in function");
  }

  final public Condition readMultipleConditions(PreProcessor p) throws ParseException {
 Condition cond = new Condition(p),cond1,cond2,cond3;
  Token t;
  Vector v =new Vector();
    if (jj_2_4(2)) {
      jj_consume_token(LPAREN);
      cond1 = readCondition(p);
      jj_consume_token(RPAREN);
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AND:
        case OR:
          ;
          break;
        default:
          jj_la1[16] = jj_gen;
          break label_8;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AND:
          t = jj_consume_token(AND);
                   cond2= new AndCondition(p);
          break;
        case OR:
          t = jj_consume_token(OR);
                   cond2= new OrCondition(p);
          break;
        default:
          jj_la1[17] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(LPAREN);
        cond3 = readMultipleConditions(p);
                cond2.addSubBlock(cond1);
                cond2.addSubBlock(cond3);
                v.addElement(cond2);
        jj_consume_token(RPAREN);
      }
        for(Enumeration enumr = v.elements(); enumr.hasMoreElements(); )
        cond.addSubBlock((Condition)enumr.nextElement());
        {if (true) return cond;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOLLAR:
      case POUND:
      case ID:
      case 49:
        cond1 = readCondition(p);
              {if (true) return(cond1);}
        break;
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public Condition readCondition(PreProcessor p) throws ParseException {
  String answer1="",answer2="",answer3="";
  Token t,t1;
  Condition c=null;
  Block b=null,b1=null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOLLAR:
      jj_consume_token(DOLLAR);
      t = jj_consume_token(ID);
                             b1 = new Variable(p,t.image);
      break;
    case POUND:
      jj_consume_token(POUND);
      b1 = readFunction(p);
      break;
    case 49:
      jj_consume_token(49);
      answer1 = readText();
      break;
    case ID:
      t = jj_consume_token(ID);
                     answer1= t.image;
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQUAL:
      jj_consume_token(EQUAL);
                                                       c = new EqualCondition(p) ;
      break;
    case NOTEQUAL:
      jj_consume_token(NOTEQUAL);
                                  c = new NotEqualCondition(p) ;
      break;
    case LESSER:
      jj_consume_token(LESSER);
                                c = new LesserCondition(p) ;
      break;
    case GREATER:
      jj_consume_token(GREATER);
                                 c = new GreaterCondition(p) ;
      break;
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
    case NUM:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUM:
        t1 = jj_consume_token(NUM);
                                 answer3=t1.image;
        break;
      case ID:
        t1 = jj_consume_token(ID);
                                                                  answer3=t1.image;
        break;
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case DOLLAR:
      jj_consume_token(DOLLAR);
      t = jj_consume_token(ID);
                                       b = new Variable(p,t.image);
      break;
    case 49:
      jj_consume_token(49);
      answer3 = readText();
      break;
    case POUND:
      jj_consume_token(POUND);
      b = readFunction(p);
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }

        if (c != null) {
           if (b1!= null)
              c.addSubBlock(b1);
           else
              c.addString(answer1);
           if (b != null)
              c.addSubBlock(b);
           else
              c.addString(answer3);
        }
        {if (true) return c;}
    throw new Error("Missing return statement in function");
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  final private boolean jj_3R_12() {
    if (jj_scan_token(AT)) return true;
    return false;
  }

  final private boolean jj_3R_20() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  final private boolean jj_3R_19() {
    if (jj_scan_token(49)) return true;
    return false;
  }

  final private boolean jj_3_2() {
    if (jj_scan_token(DOLLAR)) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  final private boolean jj_3R_18() {
    if (jj_scan_token(POUND)) return true;
    return false;
  }

  final private boolean jj_3_3() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(AFFECT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_10()) {
    jj_scanpos = xsp;
    if (jj_3R_11()) {
    jj_scanpos = xsp;
    if (jj_3R_12()) {
    jj_scanpos = xsp;
    if (jj_3R_13()) {
    jj_scanpos = xsp;
    if (jj_3R_14()) return true;
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_9() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3R_16()) return true;
    }
    return false;
  }

  final private boolean jj_3R_11() {
    if (jj_scan_token(POUND)) return true;
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_scan_token(DEFINE)) return true;
    if (jj_3R_9()) return true;
    return false;
  }

  final private boolean jj_3R_17() {
    if (jj_scan_token(DOLLAR)) return true;
    return false;
  }

  final private boolean jj_3R_10() {
    if (jj_scan_token(49)) return true;
    return false;
  }

  final private boolean jj_3R_15() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_17()) {
    jj_scanpos = xsp;
    if (jj_3R_18()) {
    jj_scanpos = xsp;
    if (jj_3R_19()) {
    jj_scanpos = xsp;
    if (jj_3R_20()) return true;
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_14() {
    if (jj_scan_token(DOLLAR)) return true;
    return false;
  }

  final private boolean jj_3R_16() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  final private boolean jj_3_4() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_15()) return true;
    return false;
  }

  final private boolean jj_3R_13() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(46)) {
    jj_scanpos = xsp;
    if (jj_scan_token(48)) return true;
    }
    return false;
  }

  public PreProcessorParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[23];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_0();
      jj_la1_1();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x3305880,0x3305080,0x3305880,0x2300000,0x3300000,0xfc000000,0x3000000,0x3000000,0x0,0x0,0x3000000,0x0,0x1000000,0x1000000,0x200,0x500,0xc00000,0xc00000,0x1000000,0x1000000,0xf0000,0x0,0x1000000,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x1f800,0x1f800,0x1f800,0x1f800,0x1f800,0x7ff,0x34800,0x34800,0x2000,0x14000,0x34800,0x4000,0x1c000,0x1c000,0x0,0x0,0x0,0x0,0x24800,0x24800,0x0,0x14000,0x34800,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[4];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public PreProcessorParser(java.io.InputStream stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new PreProcessorParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public PreProcessorParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new PreProcessorParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public PreProcessorParser(PreProcessorParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(PreProcessorParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 23; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[50];
    for (int i = 0; i < 50; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 23; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 50; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 4; i++) {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
          }
        }
        p = p.next;
      } while (p != null);
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
